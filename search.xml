<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>溯祖树与基因树之间冲突的可视化</title>
      <link href="/2024/01/20/%E6%BA%AF%E7%A5%96%E6%A0%91%E4%B8%8E%E5%9F%BA%E5%9B%A0%E6%A0%91%E4%B9%8B%E9%97%B4%E5%86%B2%E7%AA%81%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2024/01/20/%E6%BA%AF%E7%A5%96%E6%A0%91%E4%B8%8E%E5%9F%BA%E5%9B%A0%E6%A0%91%E4%B9%8B%E9%97%B4%E5%86%B2%E7%AA%81%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="溯祖树与基因树之间冲突的可视化"><a href="#溯祖树与基因树之间冲突的可视化" class="headerlink" title="溯祖树与基因树之间冲突的可视化"></a><strong>溯祖树与基因树之间冲突的可视化</strong></h1><p>主要用到PhyParts软件以及phypartspiecharts.py脚本</p><p>参考网站：</p><p><a href="https://bitbucket.org/blackrim/phyparts/src/master/README.md">blackrim &#x2F; phyparts &#x2F; README.md — Bitbucket</a></p><p><a href="https://github.com/mossmatters/phyloscripts/tree/master/phypartspiecharts">phyloscripts&#x2F;phypartspiecharts at master · mossmatters&#x2F;phyloscripts · GitHub</a></p><p><a href="https://hackmd.io/@mossmatters/ry9PP6_2u#IQTree">Abronia HybSeq Phylogeny - HackMD</a></p><p>以上的英文页面讲解非常清晰，在此抛砖引玉，方便大家检索。</p><h3 id="一、phyparts的安装（首先保证运行环境有maven，否则无法安装）"><a href="#一、phyparts的安装（首先保证运行环境有maven，否则无法安装）" class="headerlink" title="一、phyparts的安装（首先保证运行环境有maven，否则无法安装）"></a><strong>一、phyparts的安装（首先保证运行环境有maven，否则无法安装）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://bitbucket.org/blackrim/phyparts.git</span><br><span class="line"></span><br><span class="line">sh mvn_cmdline.sh（安装失败）</span><br><span class="line"></span><br><span class="line"><span class="comment">##缺少依赖，安装maven</span></span><br><span class="line"></span><br><span class="line">conda install conda-forge::maven</span><br><span class="line"></span><br><span class="line">sh mvn_cmdline.sh（安装成功）</span><br><span class="line"></span><br><span class="line">java -jar target/phyparts-0.0.1-SNAPSHOT-jar-with-dependencies.jar （无报错则安装成功）</span><br></pre></td></tr></table></figure><h3 id="二、phyparts使用"><a href="#二、phyparts使用" class="headerlink" title="二、phyparts使用"></a><strong>二、phyparts使用</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -jar /project/tianzhenWu/software/phyparts/phyparts/target/phyparts-0.0.1-SNAPSHOT-jar-with-dependencies.jar -a 1 -v -d rooted_7756_gene_tree/ -m rooted_astral_tree/astral.tree</span><br><span class="line"></span><br><span class="line">报错：Tree is invalid: missing concluding semicolon. Exiting.</span><br><span class="line"></span><br><span class="line">经过排查，原因是物种树没有rooted</span><br></pre></td></tr></table></figure><h3 id="三、可视化"><a href="#三、可视化" class="headerlink" title="三、可视化"></a>三、可视化</h3><p>下载phypartspiecharts.py脚本，来自<a href="https://github.com/mossmatters/phyloscripts/blob/master/phypartspiecharts/phypartspiecharts.py">phyloscripts&#x2F;phypartspiecharts&#x2F;phypartspiecharts.py at master · mossmatters&#x2F;phyloscripts · GitHub</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python phypartspiecharts.py rooted_astral_tree/astral.tree out 7756</span><br><span class="line"></span><br><span class="line">报错：raise NewickError(<span class="string">&quot;Unexpected newick format &#x27;%s&#x27; &quot;</span> %subnw[0:50])</span><br><span class="line">ete3.parser.newick.NewickError: Unexpected newick format <span class="string">&#x27;[&amp;label=1]:2.800269&#x27;</span></span><br><span class="line"></span><br><span class="line">原因：物种树中存在[&amp;label=1]，要将其删掉，且保证当下环境是python3，并且可以使用ete3软件</span><br></pre></td></tr></table></figure><p>添加其他参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python phypartspiecharts.py rooted_astral_tree/astral.tree_for_keshihua out 7756 --to_csv --no_ladderize --svg_name pies2.svg</span><br><span class="line"></span><br><span class="line">--colors COLORS [#9DDOC7 #8AB1D2 #E58579]参数无效。</span><br><span class="line"></span><br><span class="line">后续可以利用csv文件的数据在其他工具中重新绘制饼状图，也可以将svg打印为pdf，在ai里面手动调整颜色。</span><br></pre></td></tr></table></figure><p>得到的svg格式图片如封面所示。在软件默认设置的树节点饼状图的颜色中，蓝色表示支持这一节点的基因树的比例，绿色表示在不支持这一节点的基因树中，一致性最高的拓扑的基因树的比例，红色表示其他不支持这一节点的基因树的比例，灰色表示无信息的基因书的比例。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 网状进化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PhyParts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统发育网络推断软件PhyloNetworks和Phylonet的使用及遇到的error</title>
      <link href="/2023/10/07/phylonetwork/"/>
      <url>/2023/10/07/phylonetwork/</url>
      
        <content type="html"><![CDATA[<h5 id="一、系统发育网络推断软件PhyloNetworks的使用流程以及解决报错"><a href="#一、系统发育网络推断软件PhyloNetworks的使用流程以及解决报错" class="headerlink" title="一、系统发育网络推断软件PhyloNetworks的使用流程以及解决报错"></a>一、系统发育网络推断软件PhyloNetworks的使用流程以及解决报错</h5><p>该软件的详细说明请参考他的官方网站<a href="http://crsl4.github.io/PhyloNetworks.jl/latest/">Home · PhyloNetworks.jl (crsl4.github.io)</a>，该软件的中文流程（包括简介、安装使用流程等）请参考<a href="https://yanzhongsino.github.io/2022/04/14/bioinfo_geneflow_PhyloNetworks/">系统发育网络推断 —— PhyloNetworks | 生信技工 (yanzhongsino.github.io)</a>，本笔记参考以上两个站点并测试无报错。</p><h5 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://julialang-s3.julialang.org/bin/linux/x64/1.7/julia-1.7.2-linux-x86_64.tar.gz <span class="comment">#下载</span></span><br><span class="line">tar -xzf julia-1.7.2-linux-x86_64.tar.gz <span class="comment">#解压</span></span><br><span class="line">julia-1.7.2/bin/julia -h <span class="comment">#若无报错则安装julia成功</span></span><br><span class="line"></span><br><span class="line">julia-1.7.2/bin/julia  <span class="comment">#进入julia运行界面，类似于python和r的交互模式</span></span><br><span class="line">julia&gt; using Pkg <span class="comment">#类似于r的library和python的import来加载函数</span></span><br><span class="line">julia&gt; Pkg.add(<span class="string">&quot;PhyloNetworks&quot;</span>) <span class="comment">#安装PhyloNetworks</span></span><br><span class="line">julia&gt; Pkg.add(<span class="string">&quot;PhyloPlots&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>在安装过程中遇到以下报错</strong></p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Unable to automatically install &#x27;Bzip2&#x27; from &#x27;/home/manu/.julia/packages/Bzip2_jll/<span class="number">2</span>H8pU/Artifacts.toml</span><br></pre></td></tr></table></figure><p>参考github的论坛<a href="https://github.com/JuliaLang/Pkg.jl/issues/1705">ERROR: Unable to automatically install  Artifacts.toml issue? · Issue #1705 · JuliaLang&#x2F;Pkg.jl (github.com)</a>，以下这个解决方法对我的报错有效，在julia交互模式输入以下命令</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Pkg</span><br><span class="line"></span><br><span class="line">Pkg.PlatformEngines.probe_platform_engines!()</span><br><span class="line"></span><br><span class="line">Pkg.PlatformEngines.download(<span class="string">&quot;https://github.com/JuliaBinaryWrappers/MKL_jll.jl/releases/download/MKL-v2020.0.166%2B0/MKL.v2020.0.166.x86_64-apple-darwin14.tar.gz&quot;</span>, <span class="string">&quot;MKL_jll.tar.gz&quot;</span>; verbose=<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>再次运行Pkg.add(“PhyloNetworks”)安装成功。</p><h5 id="2、软件使用"><a href="#2、软件使用" class="headerlink" title="2、软件使用"></a>2、软件使用</h5><p>①准备两个文件，一是“多基因树文件” alltree.rooted.txt，用以计算得到CF表，CF表则用于系统发育网络推断的输入；二是“通过astral软件将多基因树整合得到的树” astral.tre，用于构建系统发育网络起点。在Julia的交互模式下</p><p>通过多基因树文件制备CF表tableCF.csv</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PhyloNetworks</span><br><span class="line"><span class="keyword">using</span> CSV</span><br><span class="line">iqtrees=joinpath(<span class="string">&quot;alltree.rooted.txt&quot;</span>) <span class="comment">#读取多基因树文件</span></span><br><span class="line">genetrees = readMultiTopology(iqtrees) <span class="comment">#解析基因树</span></span><br><span class="line">q,t = countquartetsintrees(genetrees) <span class="comment">#读取基因树，计算四分类群的CFs</span></span><br><span class="line">df = writeTableCF(q,t) <span class="comment">#读取计算得到的CF值到df：基因频率</span></span><br><span class="line">CSV.write(<span class="string">&quot;tableCF.csv&quot;</span>, df) <span class="comment">#保存df内容为tableCF.csv文件</span></span><br></pre></td></tr></table></figure><p>②构建起始网络</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PhyloNetworks </span><br><span class="line">astralfile= joinpath(<span class="string">&quot;astral.tre&quot;</span>) <span class="comment">##读取联合后的基因树文件</span></span><br><span class="line">astraltree = readMultiTopology(astralfile)[<span class="number">1</span>] <span class="comment">#读取文件中的第一棵树</span></span><br><span class="line">CF = readTableCF(<span class="string">&quot;tableCF.csv&quot;</span>) <span class="comment">#读取CF表的数据</span></span><br><span class="line">net0 = snaq!(astraltree,CF, hmax=<span class="number">0</span>, filename=<span class="string">&quot;net0&quot;</span>, seed=<span class="number">1234</span>) <span class="comment">#运行评估程序，We first impose the constraint of at most 0 hybrid node, that is, we ask for a tree</span></span><br></pre></td></tr></table></figure><p><strong>最初在运行net0 &#x3D; snaq!(astraltree,CF, hmax&#x3D;0, filename&#x3D;”net0”, seed&#x3D;1234)过程中遇到以下报错</strong></p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">：MethodError: no method matching snaq!(::<span class="built_in">Vector</span>&#123;HybridNetwork&#125;, ::DataCF; hmax=<span class="number">0</span>, filename=<span class="string">&quot;net0&quot;</span>, seed=<span class="number">1234</span>)</span><br></pre></td></tr></table></figure><p>原因是读取astralfile树时命令错误，astraltree &#x3D; readMultiTopology(astralfile)，在最末尾没有添加[1]，可能导致数据类型出现问题。当运行astraltree &#x3D; readMultiTopology(astralfile)[1]时，可正常运行。</p><p>③把得到的net0作为起点来构建hmax&#x3D;1的网络</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net1 = snaq!(net0, raxmlCF, hmax=<span class="number">1</span>, filename=<span class="string">&quot;net1&quot;</span>, seed=<span class="number">1235</span>) </span><br></pre></td></tr></table></figure><p>④迭代运行得到net2、net3……</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net2 = snaq!(net1, raxmlCF, hmax=<span class="number">2</span>, filename=<span class="string">&quot;net2&quot;</span>, seed=<span class="number">1236</span>)</span><br><span class="line">net3 = snaq!(net2, raxmlCF, hmax=<span class="number">2</span>, filename=<span class="string">&quot;net3&quot;</span>, seed=<span class="number">1237</span>)</span><br><span class="line">...... </span><br><span class="line"><span class="comment">#若最佳hmax在5以下，可用此方案</span></span><br></pre></td></tr></table></figure><p>另外，如果要运行的h值较多，也可以利用脚本运行，以下脚本未考虑迭代，即每次h值得运行都用同一个起始树astral.tre</p><p>当h为1时，设置文件名为runSNaQ_h1.jl，内容如下</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env julia</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file &quot;runSNaQ.jl&quot;. run in the shell like this in general:</span></span><br><span class="line"><span class="comment"># julia runSNaQ.jl hvalue nruns</span></span><br><span class="line"><span class="comment"># example for h=2 and default 10 runs:</span></span><br><span class="line"><span class="comment"># julia runSNaQ.jl 2</span></span><br><span class="line"><span class="comment"># or example for h=3 and 50 runs:</span></span><br><span class="line"><span class="comment"># julia runSNaQ.jl 3 50</span></span><br><span class="line"></span><br><span class="line">length(<span class="literal">ARGS</span>) &gt; <span class="number">0</span> ||</span><br><span class="line">    error(<span class="string">&quot;need 1 or 2 arguments: # reticulations (h) and # runs (optional, 10 by default)&quot;</span>)</span><br><span class="line">h = parse(<span class="built_in">Int</span>, <span class="literal">ARGS</span>[<span class="number">1</span>])</span><br><span class="line">nruns = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> length(<span class="literal">ARGS</span>) &gt; <span class="number">1</span></span><br><span class="line">    nruns = parse(<span class="built_in">Int</span>, <span class="literal">ARGS</span>[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">outputfile = string(<span class="string">&quot;net&quot;</span>, h, <span class="string">&quot;_&quot;</span>, nruns, <span class="string">&quot;runs&quot;</span>) <span class="comment"># example: &quot;net2_10runs&quot;</span></span><br><span class="line">seed = <span class="number">1234</span> + h <span class="comment"># change as desired! Best to have it different for different h</span></span><br><span class="line"><span class="meta">@info</span> <span class="string">&quot;will run SNaQ with h=<span class="variable">$h</span>, # of runs=<span class="variable">$nruns</span>, seed=<span class="variable">$seed</span>, output will go to: <span class="variable">$outputfile</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Distributed</span><br><span class="line">addprocs(nruns)</span><br><span class="line"><span class="meta">@everywhere</span> <span class="keyword">using</span> PhyloNetworks</span><br><span class="line">net0_h1 = readTopology(<span class="string">&quot;astral.tre&quot;</span>);  <span class="comment">#读取起始树，为了避免并行时linux系统环境变量得区分，在h为1时设置为net0_h1</span></span><br><span class="line"><span class="keyword">using</span> DataFrames, CSV</span><br><span class="line">df_sp = DataFrame(CSV.File(<span class="string">&quot;tableCF.csv&quot;</span>, pool=<span class="literal">false</span>); copycols=<span class="literal">false</span>); <span class="comment">#读取CF表</span></span><br><span class="line">d_sp = readTableCF!(df_sp);</span><br><span class="line">net_h1 = snaq!(net0_h1, d_sp, hmax=h, filename=outputfile, seed=seed, runs=nruns) </span><br></pre></td></tr></table></figure><p>当h为2时，设置文件名为runSNaQ_h2.jl，内容如下</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env julia</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file &quot;runSNaQ.jl&quot;. run in the shell like this in general:</span></span><br><span class="line"><span class="comment"># julia runSNaQ.jl hvalue nruns</span></span><br><span class="line"><span class="comment"># example for h=2 and default 10 runs:</span></span><br><span class="line"><span class="comment"># julia runSNaQ.jl 2</span></span><br><span class="line"><span class="comment"># or example for h=3 and 50 runs:</span></span><br><span class="line"><span class="comment"># julia runSNaQ.jl 3 50</span></span><br><span class="line"></span><br><span class="line">length(<span class="literal">ARGS</span>) &gt; <span class="number">0</span> ||</span><br><span class="line">    error(<span class="string">&quot;need 1 or 2 arguments: # reticulations (h) and # runs (optional, 10 by default)&quot;</span>)</span><br><span class="line">h = parse(<span class="built_in">Int</span>, <span class="literal">ARGS</span>[<span class="number">1</span>])</span><br><span class="line">nruns = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> length(<span class="literal">ARGS</span>) &gt; <span class="number">1</span></span><br><span class="line">    nruns = parse(<span class="built_in">Int</span>, <span class="literal">ARGS</span>[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">outputfile = string(<span class="string">&quot;net&quot;</span>, h, <span class="string">&quot;_&quot;</span>, nruns, <span class="string">&quot;runs&quot;</span>) <span class="comment"># example: &quot;net2_10runs&quot;</span></span><br><span class="line">seed = <span class="number">1234</span> + h <span class="comment"># change as desired! Best to have it different for different h</span></span><br><span class="line"><span class="meta">@info</span> <span class="string">&quot;will run SNaQ with h=<span class="variable">$h</span>, # of runs=<span class="variable">$nruns</span>, seed=<span class="variable">$seed</span>, output will go to: <span class="variable">$outputfile</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Distributed</span><br><span class="line">addprocs(nruns)</span><br><span class="line"><span class="meta">@everywhere</span> <span class="keyword">using</span> PhyloNetworks</span><br><span class="line">net0_h2 = readTopology(<span class="string">&quot;astral.tre&quot;</span>);  <span class="comment">#此处net0_h2需要修改</span></span><br><span class="line"><span class="keyword">using</span> DataFrames, CSV</span><br><span class="line">df_sp = DataFrame(CSV.File(<span class="string">&quot;tableCF.csv&quot;</span>, pool=<span class="literal">false</span>); copycols=<span class="literal">false</span>);</span><br><span class="line">d_sp = readTableCF!(df_sp);</span><br><span class="line">net_h2 = snaq!(net0_h2, d_sp, hmax=h, filename=outputfile, seed=seed, runs=nruns) <span class="comment">#此处net0_h2需要修改</span></span><br></pre></td></tr></table></figure><p>以此类推，设置h为3、4、5、6…….时得jl文件。</p><p>将运行命令写入到同一目录下run_julia.sh文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">julia runSNaQ_h1.jl 1  #数字为设置得h值</span><br><span class="line">julia runSNaQ_h2.jl 2</span><br><span class="line">julia runSNaQ_h3.jl 3</span><br><span class="line">julia runSNaQ_h4.jl 4</span><br><span class="line">julia runSNaQ_h5.jl 5</span><br><span class="line">julia runSNaQ_h6.jl 6</span><br><span class="line">julia runSNaQ_h7.jl 7</span><br><span class="line">julia runSNaQ_h8.jl 8</span><br><span class="line">julia runSNaQ_h9.jl 9</span><br><span class="line">julia runSNaQ_h10.jl 10</span><br><span class="line">julia runSNaQ_h11.jl 11</span><br><span class="line">julia runSNaQ_h12.jl 12</span><br></pre></td></tr></table></figure><p>利用nohup或screen+ParaFly组合后台运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen -S julia</span><br><span class="line">ParaFly -c run_julia.sh -CPU 12</span><br></pre></td></tr></table></figure><h5 id="3、结果解读"><a href="#3、结果解读" class="headerlink" title="3、结果解读"></a>3、结果解读</h5><p>①选择最佳系统发育网络</p><p><strong>选择运行结果中-loglik值最小的hman值时的运行结果</strong>，将不同h值得-loglik值统计好，可利用excel做折线图。</p><p>②可视化，假设h为3时所得的结果为最佳网络树</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PhyloNetworks</span><br><span class="line"><span class="keyword">using</span> PhyloPlots</span><br><span class="line"><span class="keyword">using</span> RCall</span><br><span class="line"></span><br><span class="line">net = readTopology(<span class="string">&quot;net3_10runs.out&quot;</span>)  <span class="comment">#将最佳网络树存为变量net</span></span><br><span class="line">writeTopology(net, <span class="string">&quot;bestnet_h3.tre&quot;</span>) <span class="comment">#将最佳网络树写到bestnet_h3.tre文件</span></span><br><span class="line">rootatnode!(net,<span class="string">&quot;mcap&quot;</span>)  <span class="comment">#对树进行定根</span></span><br><span class="line">imagefilename = <span class="string">&quot;snaqplot_net_root.svg&quot;</span> <span class="comment">#命名</span></span><br><span class="line"><span class="string">R&quot;svg&quot;</span>(imagefilename, width=<span class="number">4</span>, height=<span class="number">3</span>) <span class="comment">#将图片存为svg格式</span></span><br><span class="line"><span class="string">R&quot;par&quot;</span>(mar=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">plot(net, showgamma=<span class="literal">true</span>, showedgenumber=<span class="literal">true</span>);</span><br><span class="line"><span class="string">R&quot;dev.off()&quot;</span>;  <span class="comment">#将图片存为svg文件</span></span><br></pre></td></tr></table></figure><h5 id="二、系统发育网络推断软件PhyloNet的使用"><a href="#二、系统发育网络推断软件PhyloNet的使用" class="headerlink" title="二、系统发育网络推断软件PhyloNet的使用"></a>二、系统发育网络推断软件PhyloNet的使用</h5><p>该软件官网链接为<a href="https://phylogenomics.rice.edu/html/phylonetTutorial.html">PhyloNet Tutorial (rice.edu)</a></p><h5 id="1、下载安装：下载jar文件后，若系统java版本大于等于1-8-0就可以使用"><a href="#1、下载安装：下载jar文件后，若系统java版本大于等于1-8-0就可以使用" class="headerlink" title="1、下载安装：下载jar文件后，若系统java版本大于等于1.8.0就可以使用"></a>1、下载安装：下载jar文件后，若系统java版本大于等于1.8.0就可以使用</h5><h5 id="2、PhyloNet软件使用"><a href="#2、PhyloNet软件使用" class="headerlink" title="2、PhyloNet软件使用"></a>2、PhyloNet软件使用</h5><p>准备一个nex格式文件即可，script.nex包括基因树信息以及程序运行命令，举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#NEXUS</span></span><br><span class="line"></span><br><span class="line">BEGIN TREES;</span><br><span class="line"></span><br><span class="line">Tree gt0=(a:2.299,((e:1.329,f:1.329):0.77,(c:1.684,(b:1.232,d:1.232):0.451):0.416):0.2);</span><br><span class="line">Tree gt1=(a:2.085,((e:1.376,f:1.376):0.696,(d:1.487,(b:1.241,c:1.241):0.246):0.585):0.013);</span><br><span class="line">Tree gt2=(((c:0.52,d:0.52):1.243,(e:1.403,f:1.403):0.36):1.025,(a:1.863,b:1.863):0.925);</span><br><span class="line">Tree gt3=(a:2.82,((b:1.051,(c:0.86,d:0.86):0.19):1.357,(e:1.365,f:1.365):1.043):0.412);</span><br><span class="line">Tree gt4=((e:1.3,f:1.3):0.994,(a:1.869,(b:1.255,(c:0.849,d:0.849):0.405):0.615):0.425);</span><br><span class="line">Tree gt5=(a:2.46,((b:1.077,c:1.077):0.857,(f:1.141,(d:0.505,e:0.505):0.636):0.793):0.526);</span><br><span class="line">Tree gt6=(a:2.025,((b:1.111,c:1.111):0.416,(f:1.304,(d:0.727,e:0.727):0.577):0.223):0.498);</span><br><span class="line">Tree gt7=((d:1.526,(e:1.415,f:1.415):0.111):0.982,(a:2.188,(b:1.532,c:1.532):0.656):0.32);</span><br><span class="line">Tree gt8=(a:2.234,((b:1.057,c:1.057):0.766,(f:1.301,(d:0.849,e:0.849):0.452):0.522):0.411);</span><br><span class="line">Tree gt9=((e:1.644,(b:1.361,(c:0.503,d:0.503):0.858):0.283):0.787,(a:2.226,f:2.226):0.205);</span><br><span class="line">Tree gt10=(a:2.917,((e:1.683,(c:0.961,d:0.961):0.722):0.886,(b:1.779,f:1.779):0.79):0.348);</span><br><span class="line">Tree gt11=(a:2.391,((b:1.041,(c:0.602,d:0.602):0.439):0.516,(e:1.164,f:1.164):0.393):0.834);</span><br><span class="line">Tree gt12=((b:1.21,c:1.21):1.622,(a:2.443,(f:1.804,(d:0.583,e:0.583):1.221):0.639):0.389);</span><br><span class="line">Tree gt13=(a:2.047,((b:1.025,c:1.025):0.519,(f:1.295,(d:0.738,e:0.738):0.556):0.249):0.503);</span><br><span class="line">Tree gt14=(a:2.58,((d:0.919,e:0.919):0.834,(f:1.503,(b:1.228,c:1.228):0.275):0.251):0.827);</span><br><span class="line">Tree gt15=((f:1.267,(d:0.871,e:0.871):0.396):1.67,(a:2.181,(b:1.362,c:1.362):0.819):0.756);</span><br><span class="line">Tree gt16=(a:3.016,(b:1.892,(c:1.816,(f:1.479,(d:0.812,e:0.812):0.667):0.337):0.076):1.124);</span><br><span class="line">Tree gt17=((f:1.186,(d:0.721,e:0.721):0.465):1.822,(a:2.031,(b:1.13,c:1.13):0.902):0.977);</span><br><span class="line">Tree gt18=((c:1.51,(f:1.166,(d:0.521,e:0.521):0.645):0.345):1.218,(a:2.073,b:2.073):0.655);</span><br><span class="line">Tree gt19=(a:2.329,((b:1.354,c:1.354):0.467,(f:1.392,(d:0.955,e:0.955):0.437):0.429):0.508);</span><br><span class="line">Tree gt20=(a:3.31,((e:1.083,f:1.083):2.08,(b:1.923,(c:0.538,d:0.538):1.385):1.241):0.146);</span><br><span class="line"></span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BEGIN PHYLONET;</span><br><span class="line"></span><br><span class="line">InferNetwork_MPL (all) 2 -pl 8;</span><br><span class="line"></span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>运行命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar PhyloNetv3_8_2.jar script.nex</span><br></pre></td></tr></table></figure><h5 id="3、PhyloNet结果解读"><a href="#3、PhyloNet结果解读" class="headerlink" title="3、PhyloNet结果解读"></a>3、PhyloNet结果解读</h5><p>待续…</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 网状进化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PhyloNetworks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用ete3批量对基因树定根并检测单系性</title>
      <link href="/2023/10/05/%E5%88%A9%E7%94%A8ete3%E6%89%B9%E9%87%8F%E5%AF%B9%E5%9F%BA%E5%9B%A0%E6%A0%91%E5%AE%9A%E6%A0%B9/"/>
      <url>/2023/10/05/%E5%88%A9%E7%94%A8ete3%E6%89%B9%E9%87%8F%E5%AF%B9%E5%9F%BA%E5%9B%A0%E6%A0%91%E5%AE%9A%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="利用ete3的set-outgroup函数批量对基因树定根并利用check-monophyly函数检测单系性"><a href="#利用ete3的set-outgroup函数批量对基因树定根并利用check-monophyly函数检测单系性" class="headerlink" title="利用ete3的set_outgroup函数批量对基因树定根并利用check_monophyly函数检测单系性"></a>利用ete3的set_outgroup函数批量对基因树定根并利用check_monophyly函数检测单系性</h4><h5 id="对溯祖法得到的多个基因树进行定根，将多个基因树文件cat到一个文件中，得到alltree-txt，利用以下脚本对其批量定根。"><a href="#对溯祖法得到的多个基因树进行定根，将多个基因树文件cat到一个文件中，得到alltree-txt，利用以下脚本对其批量定根。" class="headerlink" title="对溯祖法得到的多个基因树进行定根，将多个基因树文件cat到一个文件中，得到alltree.txt，利用以下脚本对其批量定根。"></a>对溯祖法得到的多个基因树进行定根，将多个基因树文件cat到一个文件中，得到alltree.txt，利用以下脚本对其批量定根。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###首先下载ete3工具包</span></span><br><span class="line"><span class="keyword">from</span> ete3 <span class="keyword">import</span> Tree</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7121</span>):      <span class="comment">#提前创建7122个文件，用于写入定根后的树文件，修改为基因的数量减一</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;./%s&#x27;</span>%i + <span class="string">&#x27;.txt&#x27;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;alltree.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                t = Tree(line)</span><br><span class="line">                t.set_outgroup(t&amp;<span class="string">&quot;mcap&quot;</span>)      <span class="comment">#设置外群，修改双引号之间的物种名即可，若歪群为两个物种则改为t.set_outgroup(&quot;mcap1&quot;&amp;&quot;mcap2&quot;)</span></span><br><span class="line">                t.write(outfile=<span class="built_in">str</span>(n)+<span class="string">&quot;.txt&quot;</span>)   <span class="comment">#将每一行的树定根后写入到每一个文件中</span></span><br><span class="line">                n=n+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>写为python脚本并运行，然后将其合并方便后续分析。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;&#x27;</span> *.txt &gt; alltree.rooted.txt</span><br></pre></td></tr></table></figure><h5 id="检测单系性"><a href="#检测单系性" class="headerlink" title="检测单系性"></a>检测单系性</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ete3 <span class="keyword">import</span> Tree</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;alltree.rooted.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#此处alltree.rooted.txt为包含所有基因树的文件，每行一个基因树</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">t = Tree(line)</span><br><span class="line"><span class="built_in">print</span>(t.check_monophyly(values=[<span class="string">&quot;aawi&quot;</span>, <span class="string">&quot;asub&quot;</span>, <span class="string">&quot;aflo&quot;</span>, <span class="string">&quot;agem&quot;</span>, <span class="string">&quot;aint&quot;</span>, <span class="string">&quot;apal&quot;</span>, <span class="string">&quot;adig&quot;</span>, <span class="string">&quot;alor&quot;</span>, <span class="string">&quot;aacu&quot;</span>, <span class="string">&quot;anas&quot;</span>, <span class="string">&quot;amic&quot;</span>, <span class="string">&quot;amil&quot;</span>, <span class="string">&quot;asel&quot;</span>, <span class="string">&quot;acyt&quot;</span>, <span class="string">&quot;ahya&quot;</span>, <span class="string">&quot;amur&quot;</span>, <span class="string">&quot;aech&quot;</span>], target_attr=<span class="string">&quot;name&quot;</span>))   <span class="comment">#利用check_monophyly函数检测单系性，修改方括号内的物种名即可</span></span><br></pre></td></tr></table></figure><p>将上述写为python脚本并运行，输出内容为true或者false，便可判断所列物种在每个基因树中是否为单系。</p><p>参考</p><p><a href="http://etetoolkit.org/docs/latest/tutorial/tutorial_trees.html#tree-rooting">使用树数据结构 — ETE 工具包 - 树的分析和可视化 (etetoolkit.org)</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 批量处理方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ete3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用cafe5进行基因家族扩张收缩分析</title>
      <link href="/2023/09/02/%E5%88%A9%E7%94%A8cafe5%E8%BF%9B%E8%A1%8C%E5%9F%BA%E5%9B%A0%E5%AE%B6%E6%97%8F%E6%89%A9%E5%BC%A0%E6%94%B6%E7%BC%A9%E5%88%86%E6%9E%90/"/>
      <url>/2023/09/02/%E5%88%A9%E7%94%A8cafe5%E8%BF%9B%E8%A1%8C%E5%9F%BA%E5%9B%A0%E5%AE%B6%E6%97%8F%E6%89%A9%E5%BC%A0%E6%94%B6%E7%BC%A9%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="利用cafe5进行基因家族扩张收缩分析"><a href="#利用cafe5进行基因家族扩张收缩分析" class="headerlink" title="利用cafe5进行基因家族扩张收缩分析"></a>利用cafe5进行基因家族扩张收缩分析</h3><p><em>测试于2023年9月1日</em></p><blockquote><p>基于orthofinder直系同源聚类的结果，可以看在树的特定节点上哪些基因家族发生了扩张与收缩</p></blockquote><blockquote><p>软件安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在单独的conda环境里安装并运行，避免环境冲突</span></span><br><span class="line">conda activate biosoft</span><br><span class="line">conda install -c bioconda cafe</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试成功安装</span></span><br><span class="line">cafe5 -h</span><br></pre></td></tr></table></figure><blockquote><p>准备文件包括1、带有分歧时间的树，由MCMCtree产生；2、直系同源基因家族的聚类情况，由orthofinder结果产生；</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#step 1 准备树文件，FigTree.tre来自MCMCtree结果</span></span><br><span class="line"></span><br><span class="line">grep  <span class="string">&quot;UTREE 1 =&quot;</span> FigTree.tre | sed -E -e <span class="string">&quot;s/\[[^]]*\]//g&quot;</span> -e <span class="string">&quot;s/[ \t]//g&quot;</span> -e <span class="string">&quot;/^$/d&quot;</span> -e <span class="string">&quot;s/UTREE1=//&quot;</span> &gt; tree.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#step 2 用orthofinder2的结果文件Orthogroups.GeneCount.tsv转换成gene_families.txt文件，文件路径在/home/tianzhen/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups</span></span><br><span class="line"></span><br><span class="line">awk -v OFS=<span class="string">&quot;\t&quot;</span> <span class="string">&#x27;&#123;$NF=null;print $1,$0&#125;&#x27;</span> Orthogroups.GeneCount.tsv |sed -E -e <span class="string">&#x27;s/Orthogroup/desc/&#x27;</span> -e <span class="string">&#x27;s/_[^\t]+//g&#x27;</span> &gt; orthomcl2cafe.tab</span><br><span class="line"> </span><br><span class="line"><span class="comment">#或者使用perl脚本提取orthomcl2cafe.tab文件，Orthogroups.txt 文件所在路径为/OrthoFinder/Results_Nov22/Orthogroups/Orthogroups.txt</span></span><br><span class="line"></span><br><span class="line">perl orthoMCL2cafe.pl Orthogroups.txt &gt; orthomcl2cafe.tab</span><br><span class="line"></span><br><span class="line"><span class="comment">#step 3 剔除不同物种间拷贝数差异过大的基因家族，否则会报错</span></span><br><span class="line"></span><br><span class="line">python ~/scripts/cafetutorial_clade_and_size_filter.py -i orthomcl2cafe.tab -o gene_family_filter.txt -s</span><br></pre></td></tr></table></figure><blockquote><p>运行cafe5软件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#step 1 首先评估lambda，此步应该可以省略，在运行中不添加-l参数，则会自动评估lambda值</span></span><br><span class="line">cafe5 -i orthomcl2cafe.tab -t tree.txt -p -o singlelambda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能因为某些基因家族数量过大会报错，报错内容为：</span></span><br><span class="line">Families with largest size differentials:</span><br><span class="line">OG0000385: 97</span><br><span class="line">OG0000296: 97</span><br><span class="line">OG0000029: 96</span><br><span class="line">OG0000030: 95</span><br><span class="line">OG0000016: 93</span><br><span class="line">OG0000142: 92</span><br><span class="line">OG0000232: 91</span><br><span class="line">OG0000035: 91</span><br><span class="line">OG0000155: 89</span><br><span class="line">OG0000115: 89</span><br><span class="line">OG0000027: 88</span><br><span class="line">OG0000079: 86</span><br><span class="line">OG0000034: 83</span><br><span class="line">OG0000044: 82</span><br><span class="line">OG0000055: 80</span><br><span class="line">OG0000067: 79</span><br><span class="line">OG0000943: 78</span><br><span class="line">OG0000050: 77</span><br><span class="line">OG0000110: 76</span><br><span class="line">OG0000088: 76</span><br><span class="line">You may want to try removing the top few families with the largest difference</span><br><span class="line">between the max and min counts and <span class="keyword">then</span> re-run the analysis.</span><br><span class="line"></span><br><span class="line">Failed to initialize any reasonable values</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上述基因家族写入文件，准备从orthomcl2cafe.tab中剔除掉</span></span><br><span class="line">vi families_largest.txt</span><br><span class="line">sed -i <span class="string">&#x27;s/:.*//g&#x27;</span> families_largest.txt</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat families_largest.txt`;<span class="keyword">do</span> sed -i <span class="string">&quot;/<span class="variable">$i</span>/d&quot;</span> orthomcl2cafe.tab;<span class="keyword">done</span></span><br><span class="line">(grep -v -f family.remove.id.txt input.tab &gt;input.tab.new)</span><br><span class="line"><span class="comment"># 重新运行，评估lambda值</span></span><br><span class="line">cafe5 -i orthomcl2cafe.tab -t tree.txt -p -o singlelambda</span><br><span class="line"></span><br><span class="line"><span class="comment">#step 2 调整k参数2-5,多次运行，选择最优k值的结果</span></span><br><span class="line">cafe5 -i orthomcl2cafe.tab -t tree.txt -p -k 2 -l 0.0001 -o k2p</span><br><span class="line">cafe5 -i orthomcl2cafe.tab -t tree.txt -p -k 3 -l 0.0001 -o k3p</span><br><span class="line">cafe5 -i orthomcl2cafe.tab -t tree.txt -p -k 4 -l 0.0001 -o k4p</span><br><span class="line">cafe5 -i orthomcl2cafe.tab -t tree.txt -p -k 5 -l 0.0001 -o k5p</span><br></pre></td></tr></table></figure><blockquote><p>在结果中的Gamma_results.txt文件里查看lnL值，选择该值最大的k值运行结果作为后续分析的文件</p><p>接下来提取感兴趣节点的基因家族序列</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在Gamma_change.tab文件里提取节点35的扩张的家族，位于第37列</span></span><br><span class="line">cat ../Gamma_change.tab |cut -f1,37|grep <span class="string">&quot;+[1-9]&quot;</span> &gt; cr.expanded    </span><br><span class="line"></span><br><span class="line"><span class="comment">#根据sample ID和编号提取sample分支的基因家族显著扩张或收缩的基因家族树（Gamma_asr.tre文件中默认以p&lt;0.05为标准判断变化是否显著）</span></span><br><span class="line">grep <span class="string">&quot;&lt;35&gt;\*&quot;</span> ../Gamma_asr.tre &gt; cr_significant_trees.tre    </span><br><span class="line"></span><br><span class="line"><span class="comment">#提取sample分支显著变化的OG IDs （默认以p&lt;0.05为标准）</span></span><br><span class="line">grep -E -o <span class="string">&quot;OG[0-9]+&quot;</span> cr_significant_trees.tre &gt; cr_significant.ogs  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 以p&lt;0.05为标准提取所有显著扩张或收缩的orthogroupsID（根据情况调整，常用p&lt;0.05或p&lt;0.01）</span></span><br><span class="line">awk <span class="string">&#x27;$2 &lt;0.05 &#123;print $1&#125;&#x27;</span> ../Gamma_family_results.txt &gt;p0.05_significant.ogs </span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取以p&lt;0.05为标准判断显著性的sample分支基因家族显著变化的OG IDs</span></span><br><span class="line">grep -f cr_significant.ogs p0.05_significant.ogs &gt; cr_p0.05_significant.ogs </span><br><span class="line"></span><br><span class="line"><span class="comment">#提取显著扩张的sample物种的orthogroupsID</span></span><br><span class="line">grep -f cr_p0.05_significant.ogs cr.expanded |cut -f1 &gt; cr.expanded.significant</span><br><span class="line"></span><br><span class="line"><span class="comment">#提取显著扩张的基因列表，假设基因ID的前缀是amil</span></span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep <span class="string">&quot;amil&quot;</span> |sort -k 1.3n |uniq &gt; cr.amil.expanded.significant.genes</span><br><span class="line"><span class="comment">#祖先节点则将所有物种的序列都提出来</span></span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep adig |sort -k 1.3n |uniq &gt; cr.adig.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep aequ |sort -k 1.3n |uniq &gt; cr.aequ.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep afen |sort -k 1.3n |uniq &gt; cr.afen.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep alor |sort -k 1.3n |uniq &gt; cr.alor.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep amil |sort -k 1.3n |uniq &gt; cr.amil.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep apall |sort -k 1.3n |uniq &gt; cr.apall.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep atene |sort -k 1.3n |uniq &gt; cr.atene.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep atenu |sort -k 1.3n |uniq &gt; cr.atenu.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep dgig |sort -k 1.3n |uniq &gt; cr.dgig.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep disc |sort -k 1.3n |uniq &gt; cr.disc.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep edia |sort -k 1.3n |uniq &gt; cr.edia.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep fung |sort -k 1.3n |uniq &gt; cr.fung.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep gasp |sort -k 1.3n |uniq &gt; cr.gasp.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep gfas |sort -k 1.3n |uniq &gt; cr.gfas.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep hvul |sort -k 1.3n |uniq &gt; cr.hvul.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep nvec |sort -k 1.3n |uniq &gt; cr.nvec.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep ofav |sort -k 1.3n |uniq &gt; cr.ofav.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep pdae |sort -k 1.3n |uniq &gt; cr.pdae.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep pdam |sort -k 1.3n |uniq &gt; cr.pdam.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep plut |sort -k 1.3n |uniq &gt; cr.plut.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep pspe |sort -k 1.3n |uniq &gt; cr.pspe.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep pverr |sort -k 1.3n |uniq &gt; cr.pverr.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep rmue |sort -k 1.3n |uniq &gt; cr.rmue.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep spis |sort -k 1.3n |uniq &gt; cr.spis.expanded.significant.genes</span><br><span class="line">grep -f cr.expanded.significant ~/2023-redo-cafe/OrthoFinder/Results_Aug27/Orthogroups/Orthogroups.txt|sed <span class="string">&quot;s/ /\n/g&quot;</span>|grep xeni |sort -k 1.3n |uniq &gt; cr.xeni.expanded.significant.genes</span><br><span class="line"></span><br><span class="line"><span class="comment">#提取所有显著扩张的基因序列，用于基因注释</span></span><br><span class="line">seqkit grep -f ../cr.adig.expanded.significant.genes /home/tianzhen/2023-redo-cafe/adig.fasta &gt; cr.adig.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.aequ.expanded.significant.genes /home/tianzhen/2023-redo-cafe/aequ.fasta &gt; cr.aequ.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.afen.expanded.significant.genes /home/tianzhen/2023-redo-cafe/afen.fasta &gt; cr.afen.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.alor.expanded.significant.genes /home/tianzhen/2023-redo-cafe/alor.fasta &gt; cr.alor.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.amil.expanded.significant.genes /home/tianzhen/2023-redo-cafe/amil.fasta &gt; cr.amil.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.apall.expanded.significant.genes /home/tianzhen/2023-redo-cafe/apall.fasta &gt; cr.apall.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.atene.expanded.significant.genes /home/tianzhen/2023-redo-cafe/atene.fasta &gt; cr.atene.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.atenu.expanded.significant.genes /home/tianzhen/2023-redo-cafe/atenu.fasta &gt; cr.atenu.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.dgig.expanded.significant.genes /home/tianzhen/2023-redo-cafe/dgig.fasta &gt; cr.dgig.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.disc.expanded.significant.genes /home/tianzhen/2023-redo-cafe/disc.fasta &gt; cr.disc.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.edia.expanded.significant.genes /home/tianzhen/2023-redo-cafe/edia.fasta &gt; cr.edia.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.fung.expanded.significant.genes /home/tianzhen/2023-redo-cafe/fung.fasta &gt; cr.fung.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.gasp.expanded.significant.genes /home/tianzhen/2023-redo-cafe/gasp.fasta &gt; cr.gasp.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.gfas.expanded.significant.genes /home/tianzhen/2023-redo-cafe/gfas.fasta &gt; cr.gfas.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.hvul.expanded.significant.genes /home/tianzhen/2023-redo-cafe/hvul.fasta &gt; cr.hvul.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.nvec.expanded.significant.genes /home/tianzhen/2023-redo-cafe/nvec.fasta &gt; cr.nvec.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.ofav.expanded.significant.genes /home/tianzhen/2023-redo-cafe/ofav.fasta &gt; cr.ofav.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.pdae.expanded.significant.genes /home/tianzhen/2023-redo-cafe/pdae.fasta &gt; cr.pdae.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.pdam.expanded.significant.genes /home/tianzhen/2023-redo-cafe/pdam.fasta &gt; cr.pdam.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.plut.expanded.significant.genes /home/tianzhen/2023-redo-cafe/plut.fasta &gt; cr.plut.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.pspe.expanded.significant.genes /home/tianzhen/2023-redo-cafe/pspe.fasta &gt; cr.pspe.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.pverr.expanded.significant.genes /home/tianzhen/2023-redo-cafe/pverr.fasta &gt; cr.pverr.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.rmue.expanded.significant.genes /home/tianzhen/2023-redo-cafe/rmue.fasta &gt; cr.rmue.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.spis.expanded.significant.genes /home/tianzhen/2023-redo-cafe/spis.fasta &gt; cr.spis.expanded.significant.pep.fas</span><br><span class="line">seqkit grep -f ../cr.xeni.expanded.significant.genes /home/tianzhen/2023-redo-cafe/xeni.fasta &gt; cr.xeni.expanded.significant.pep.fas</span><br><span class="line"></span><br><span class="line"><span class="comment">#将上面的序列合为一个fasta文件，用于基因功能注释</span></span><br><span class="line">cat *.fas &gt; all_sequences_for_anno.fas</span><br></pre></td></tr></table></figure><p>参考</p><p><a href="https://github.com/hahnlab/CAFE5">hahnlab&#x2F;CAFE5: Version 5 of the CAFE phylogenetics software (github.com)</a></p><p><a href="https://yanzhongsino.github.io/2021/10/29/bioinfo_gene.family_CAFE5/">分析基因家族扩张和收缩 —— CAFE5 | 生信技工 (yanzhongsino.github.io)</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 分析笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cafe5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ete3</title>
      <link href="/2023/04/04/ete3/"/>
      <url>/2023/04/04/ete3/</url>
      
        <content type="html"><![CDATA[<h3 id="如何利用ete3包从系统发育树中提取子树"><a href="#如何利用ete3包从系统发育树中提取子树" class="headerlink" title="如何利用ete3包从系统发育树中提取子树"></a>如何利用ete3包从系统发育树中提取子树</h3><p><strong>ete3：用于构建、比较、注释、操作和可视化系统发育树的Python包。</strong></p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conda install ete3 #conda安装</span><br><span class="line">python #在操作文件目录下进入python命令行交互界面</span><br><span class="line">import ete3 #导入ete3包</span><br><span class="line">t = ete3.Tree(&quot;tree.txt&quot;) #将原来的进化树定义为t</span><br><span class="line">subtree_taxa = [&quot;Orbicella_annularis&quot;,&quot;Pocillipora_damicornis&quot;,&quot;Stylophora_pistillata&quot;,&quot;Hydra_vulgaris&quot;,&quot;Acropora_digitifera&quot;,&quot;Acropora_millepora&quot;,&quot;Acropora_tenuis&quot;,&quot;Porites_lutea&quot;,&quot;Renilla_muelleri&quot;,&quot;Discosoma_santahelenae&quot;,&quot;Amplexidiscus_fenestrafer&quot;,&quot;Dendronephthya_sinaiensis&quot;,&quot;Nematostella_vectensis&quot;,&quot;Exaiptasia_pallida&quot;,&quot;Actinia_equina&quot;] #将待提取的物种列表存入subtree_taxa变量</span><br><span class="line">t.prune(subtree_taxa,preserve_branch_length=True) #利用prune方法提取子树</span><br><span class="line">print(t) #查看子树拓扑</span><br><span class="line">t.write(outfile=&quot;subtree.txt&quot;) #将子树存为文件</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learn_perl</title>
      <link href="/2022/12/17/learn-perl/"/>
      <url>/2022/12/17/learn-perl/</url>
      
        <content type="html"><![CDATA[<p><strong>Perl是一种高效处理文本文件的脚本语言，下面记录了一些常用的基因序列处理的perl函数或工具</strong></p><img src="/2022/12/17/learn-perl/perl.jpg" class title="perl"><span id="more"></span><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="1、scalar"><a href="#1、scalar" class="headerlink" title="1、scalar"></a>1、scalar</h4><p>大小写转换工具：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uc</span> $seq_of_BRAC2; <span class="comment">#转大写</span></span><br><span class="line"><span class="keyword">lc</span> $seq_of_BRAC2; <span class="comment">#转小写</span></span><br><span class="line">$seq_of_BRAC2 =~ <span class="regexp">tr/atgc/ATGC/</span>; <span class="comment">#转大写</span></span><br><span class="line">$seq_of_BRAC2 =~ <span class="regexp">tr/ATGC/atgc/</span>; <span class="comment">#转小写</span></span><br></pre></td></tr></table></figure><p>利用tr工具统计4种碱基的个数</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $count = $seperate_dna =~ <span class="regexp">tr/atgc/atgc/</span>; <span class="comment">#统计$seperate_dna中小写atgc的数目</span></span><br><span class="line"><span class="keyword">my</span> $count = $seperate_dna =~ <span class="regexp">tr/ATGC/ATGC/</span>; <span class="comment">#统计$seperate_dna中大写ATGC的数目</span></span><br><span class="line"><span class="keyword">my</span> $count = $seperate_dna =~ <span class="regexp">tr/A/A/</span>; <span class="comment">#统计$seperate_dna中A的数目</span></span><br></pre></td></tr></table></figure><p>取反向互补序列</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $reversed_zika_DNA = <span class="keyword">reverse</span>($zika_DNA);</span><br><span class="line">$reversed_zika_DNA =~ <span class="regexp">tr/ATCGatcg/TAGCTAGC/</span>;</span><br></pre></td></tr></table></figure><p>利用点符号连接字符串</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $M_codon = <span class="string">&quot;AUG&quot;</span>;</span><br><span class="line"><span class="keyword">my</span> $S_codon = <span class="string">&quot;UCA&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $RNA_seq = $M_codon.$S_codon;</span><br></pre></td></tr></table></figure><p>统计字符串长度</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $zika_DNA = <span class="string">&quot;AGTTGTTGATCTGTGTGAGT&quot;</span>;</span><br><span class="line"><span class="keyword">my</span> $zika_DNA_lenth = <span class="keyword">length</span>($zika_DNA);</span><br></pre></td></tr></table></figure><p>替换掉序列中的空格及子片段</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$seq_of_BRAC2 =~ <span class="regexp">s/\s//g</span>;</span><br><span class="line">$zika_DNA =~ <span class="regexp">s/atg/ATG/g</span>;</span><br><span class="line">$zika_DNA =~ <span class="regexp">s/[0123456789]//g</span>;</span><br></pre></td></tr></table></figure><p>格式化打印输出内容，分别打印3个最长长度为15，10，10的字符串</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">printf</span> <span class="string">&quot;%15s %10s %10s \n&quot;</span>,<span class="string">&quot;Amino acid&quot;</span>,<span class="string">&quot;1-letter&quot;</span>,<span class="string">&quot;codon&quot;</span>;</span><br></pre></td></tr></table></figure><p>利用index函数的返回值判断一个字符串是否包含另一个字符串，返回-1表示不包含，返回其他数值表示$shorter_seq在$seq中的索引</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $index = <span class="keyword">index</span>($seq,$shorter_seq);</span><br><span class="line"><span class="keyword">if</span> ($index eq -<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;the second sequence is not a substring of the first string&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;the second sequence is a substring of the first string&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取一个字符串在另一个字符串的索引值</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $first_index = <span class="keyword">index</span>($up_dna,$motif); <span class="comment">#取第一个索引值</span></span><br><span class="line"><span class="keyword">my</span> $second_index = <span class="keyword">index</span>($up_dna,$motif,($first_index + <span class="keyword">length</span>($motif))); <span class="comment">#第三个参数为起始位置的索引</span></span><br><span class="line"><span class="keyword">my</span> $last_index = <span class="keyword">rindex</span>($up_dna,$motif); <span class="comment">#取最后一个索引值，如不包含，则返回-1</span></span><br></pre></td></tr></table></figure><p>利用substr函数根据索引值在DNA序列里提取DNA片段</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $seperate_dna = <span class="keyword">substr</span>($dna,$first_index + <span class="number">4</span>,$last_index - $first_index - <span class="number">4</span>); <span class="comment">#3个参数分别表示DNA序列字符串、提取子片段的起始索引值、提取子片段的长度</span></span><br></pre></td></tr></table></figure><h4 id="2、array"><a href="#2、array" class="headerlink" title="2、array"></a>2、array</h4><p>数组内第一个元素的索引是0，$stop_codon[0]是@stop_codon的第一个元素</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> @stop_codon = (<span class="string">&quot;TAA&quot;</span>,<span class="string">&quot;tAG&quot;</span>);</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Stop codon are @stop_codon\n&quot;</span>;</span><br><span class="line"><span class="keyword">my</span> $first_stop_codon = $stop_codon[<span class="number">0</span>];</span><br><span class="line">$stop_codon[<span class="number">2</span>] = <span class="string">&quot;TGA&quot;</span>; <span class="comment">#向数组添加元素</span></span><br></pre></td></tr></table></figure><p>向数组内添加或去除元素</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> @aa = (<span class="string">&quot;GAA&quot;</span>,<span class="string">&quot;GAG&quot;</span>);</span><br><span class="line"><span class="keyword">push</span> (@aa,<span class="string">&quot;GAU&quot;</span>); <span class="comment">#在数组末尾添加元素</span></span><br><span class="line"><span class="keyword">unshift</span> (@aa,<span class="string">&quot;GAC&quot;</span>); <span class="comment">#添加第一个元素</span></span><br><span class="line"><span class="keyword">pop</span> @aa; <span class="comment">#去除最后一个元素</span></span><br><span class="line"><span class="keyword">shift</span> (@aa); <span class="comment">#去除第一个元素</span></span><br></pre></td></tr></table></figure><p>利用sort对数组内元素进行排序</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@input_line = <span class="keyword">sort</span>(@input_line);</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> @sorted_numbers = <span class="keyword">sort</span> &#123; $a &lt;=&gt; $b &#125; @unsorted_numbers;</span><br><span class="line"><span class="keyword">my</span> @sorted_numbers1 = <span class="keyword">sort</span> &#123; $b &lt;=&gt; $a &#125; @unsorted_numbers;</span><br><span class="line"><span class="comment">#sort &#123; $a &lt;=&gt; $b &#125; 升序；sort &#123; $b &lt;=&gt; $a &#125;降序</span></span><br></pre></td></tr></table></figure><p>foreach依次对数组内元素进行操作</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> <span class="keyword">my</span> $i (@input_line)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$i\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用scala函数统计数组内的元素个数</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $number_of_element = <span class="keyword">scalar</span> @aa;</span><br></pre></td></tr></table></figure><p>利用split函数分割字符串并存入数组</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $BRAC2_seq = <span class="string">&quot;gggtgcgacgattcattgttttcggacaag&quot;</span>;</span><br><span class="line"><span class="keyword">my</span> @nucleotides = <span class="keyword">split</span>(<span class="regexp">//</span>,$BRAC2_seq); <span class="comment">#按照斜杠内部的符号切分每一个碱基并存入数组</span></span><br></pre></td></tr></table></figure><p>利用join函数连接数组中的元素为一个字符串（与split相反）</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $BRAC2_seq = <span class="keyword">join</span>(<span class="string">&#x27;&#x27;</span>,@nucleotides); <span class="comment">#单引号内为连接符，此处表示无连接符</span></span><br></pre></td></tr></table></figure><h4 id="3、hash"><a href="#3、hash" class="headerlink" title="3、hash"></a>3、hash</h4><p>取哈希的键值分别存为数组</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> %restriction_enzymes = (<span class="string">&quot;EcoRI&quot;</span> =&gt; <span class="string">&quot;GAATTC&quot;</span>,</span><br><span class="line"><span class="string">&quot;AluI&quot;</span> =&gt; <span class="string">&quot;AGCT&quot;</span>,</span><br><span class="line"><span class="string">&quot;NotI&quot;</span> =&gt; <span class="string">&quot;GCGGCCGC&quot;</span>,</span><br><span class="line"><span class="string">&quot;TaqI&quot;</span> =&gt; <span class="string">&quot;TCGA&quot;</span>);</span><br><span class="line"><span class="keyword">my</span> @key_list = <span class="keyword">keys</span> %restriction_enzymes;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;@key_list\n&quot;</span>;</span><br><span class="line"><span class="keyword">my</span> @value_list = <span class="keyword">values</span> %restriction_enzymes;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;@value_list\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>删除哈希内部元素</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> $restriction_enzymes&#123;<span class="string">&quot;TaqI&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="循环与判断"><a href="#循环与判断" class="headerlink" title="循环与判断"></a>循环与判断</h3><p>perl的if-else结构：if(判断语句){执行语句;}else{执行语句;}</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $dna_segment = <span class="string">&quot;ATGACATGA&quot;</span>;</span><br><span class="line"><span class="keyword">my</span> $codon1 = <span class="keyword">substr</span>($dna_segment,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>( $codon1 eq <span class="string">&quot;ATG&quot;</span> )&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;codon $codon1 is a start codon.\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;codon $codon1 is not a start codon.\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>perl的if-elsif-else结构：if(判断语句){执行语句;}elsif(判断语句){执行语句;}else{执行语句;}</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $dna_segment = <span class="string">&quot;ATGACATGACCAATAA&quot;</span>;</span><br><span class="line"><span class="keyword">my</span> $codon = <span class="keyword">substr</span>($dna_segment,-<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>($codon eq <span class="string">&quot;ATG&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;codon $codon is a start codon\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elsif</span>(($codon eq <span class="string">&quot;TAA&quot;</span>) <span class="keyword">or</span> ($codon eq <span class="string">&quot;TAG&quot;</span>) <span class="keyword">or</span> ($codon eq <span class="string">&quot;TGA&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;codon $codon is a stop codon\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Codon $codon is neither a start nor a stop codon\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>perl的while循环结构：while(判断语句){执行语句;}</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>($index &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">$reversed = $reversed.substr($zika_dna,$index,<span class="number">1</span>);</span><br><span class="line">$index = $index - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="comment">#此处利用序列的索引和while循环取反向序列</span></span><br></pre></td></tr></table></figure><p>无限循环</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( )&#123;</span><br><span class="line">commands;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>perl的foreach循环结构：foreach my $i (数组){执行语句}</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> @bases = (<span class="string">&quot;T&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;G&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> <span class="keyword">my</span> $base (@bases)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$base&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>perl的for循环结构：for(表达式1; 表达式2; 表达式3){执行语句;}</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $population = <span class="number">425</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">my</span> $year = <span class="number">0</span>; $year &lt;= <span class="number">28</span>; $year++)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;at year $year, the population is $population\n&quot;</span>;</span><br><span class="line">$population = $population + $population * <span class="number">0</span>.<span class="number">01</span>94;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>利用文件句柄FF打开文件，$!是一个魔术变量，对应于操作系统的数字错误代码，die函数会输出你指定的信息到专为这类信息准备的标准错误流中，并且让你的程序立刻终止并返回不为零的退出码。</p><p>读取文件，“&lt;”表示将右侧文件的内容传递到左侧的文件句柄中；利用while循环逐行读取每一行的内容；利用close函数关闭文件句柄；</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $filename = <span class="string">&quot;read_from_file.pl&quot;</span>;</span><br><span class="line"><span class="keyword">open</span> (FF, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;$filename&quot;</span>)<span class="keyword">or</span> <span class="keyword">die</span> <span class="string">&quot;Cannot open $filename to write: $!&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">my</span> $line = &lt;FF&gt;)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$line&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">close</span> (FF);</span><br></pre></td></tr></table></figure><p>写入文件，”&gt;”表示将左侧句柄表示的内容传递给右侧文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $filename = <span class="string">&quot;a.fas&quot;</span>;</span><br><span class="line"><span class="keyword">open</span> (FF, <span class="string">&quot;&gt;&quot;</span>, $filename)<span class="keyword">or</span> <span class="keyword">die</span> <span class="string">&quot;cannot open $filename to write: $!&quot;</span>;</span><br></pre></td></tr></table></figure><p>open函数打开文件用法</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>&lt;</td><td>只读方式打开，将文件指针指向文件头</td></tr><tr><td>&gt;</td><td>写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之</td></tr><tr><td>&gt;&gt;</td><td>写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之</td></tr><tr><td>+&lt;</td><td>读写方式打开，将文件指针指向文件头</td></tr><tr><td>+&gt;</td><td>读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之</td></tr><tr><td>+&gt;&gt;</td><td>读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之</td></tr></tbody></table><p>利用文件句柄FF写入内容至文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> FF <span class="string">&quot;ATG\n&quot;</span>;</span><br><span class="line"><span class="keyword">close</span> (FF); </span><br></pre></td></tr></table></figure><p>利用opendir函数打开文件夹</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">opendir</span> ( DIR, $dirname ) || <span class="keyword">die</span> <span class="string">&quot;Error in opening dir $dirname\n&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>( ($filename = <span class="keyword">readdir</span>(DIR))) &#123;</span><br><span class="line">   <span class="keyword">print</span>(<span class="string">&quot;$filename\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">closedir</span>(DIR);</span><br></pre></td></tr></table></figure><p>判断是否存在文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (-e $filename)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Rosetta partial genome is written to $filename file successfully!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他文件测试操作 <strong>(</strong> Other File Test Operators **)**，可以使用“和”(&amp;&amp;)或“或”(||)运算符一次测试两个或多个表达式。 其他一些文件测试运算符是：</p><p><code>-r checks if the file is readable #检查文件是否可读</code></p><p><code>-w checks if the file is writeable #检查文件是否可写</code></p><p><code>-x checks if the file is executable #检查文件是否可执行</code></p><p><code>-z checks if the file is empty #检查文件是否为空</code></p><p><code>-f checks if the file is a plain file #检查文件是否为纯文件</code></p><p><code>-d checks if the file is a directory #检查文件是否为目录</code></p><p><code>-l checks if the file is a symbolic link #检查文件是否为符号链接</code></p><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><p>1、判断字符串是否包含某个正则表达式</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($seq =~ <span class="regexp">m/$motif/</span>)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;found the motif\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、模式匹配成功后，会将匹配部分自动存储在变量$1中；</p><p>3、undef和defined函数，undef表示的像是数据库中的”null”。它表示空,啥也没有,是完全未定义的。这不等于字符串的空，不等于数值0，它是另一种类型。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$seq =~ <span class="regexp">m/($motif)/</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">defined</span> $1)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;found the motif $1\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、判断字符串是否匹配空行，^\s*$代表空行</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($motif =~ <span class="regexp">m/^\s*$/</span>)&#123;</span><br><span class="line"><span class="keyword">last</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、g表示全局匹配；</p><p>6、while ($seq &#x3D;~ m&#x2F;($motif)&#x2F;g){}对所有地匹配进行循环操作；</p><p>7、pos()函数用于查找最后匹配的子字符串的偏移量或位置，如下面示例：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> $seq = <span class="string">&quot;AATGAAGGGCCGCTACGATAAGGAACTTCGTAATTTCAG&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;seq = $seq\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $motif = <span class="string">&quot;[AT]&#123;3,6&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">my</span> $match_motif;</span><br><span class="line"><span class="keyword">my</span> $match_loc;</span><br><span class="line"><span class="keyword">my</span> $number_of_match = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ($seq =~ <span class="regexp">m/($motif)/g</span>)&#123;</span><br><span class="line">$match_motif = $1;</span><br><span class="line">$match_loc = <span class="keyword">pos</span>($seq) - <span class="keyword">length</span>($match_motif);</span><br><span class="line">$number_of_match = $number_of_match + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;matcg $number_of_match : $match_motif at $match_loc\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、正则匹配将序列按照每10个碱基为一行打印出来</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ($seq =~ <span class="regexp">m/(.&#123;1,$magic_number&#125;)/g</span>)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$1\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="1、正则字符及其含义"><a href="#1、正则字符及其含义" class="headerlink" title="1、正则字符及其含义"></a>1、正则字符及其含义</h4><table><thead><tr><th>符号或字符</th><th>所表达意义</th></tr></thead><tbody><tr><td>.</td><td>任何字符，除了换行符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\s</td><td>任何空白字符，包括空格、换行符、制表符</td></tr><tr><td>\S</td><td>任何非空字符</td></tr><tr><td>\d</td><td>任何数字</td></tr><tr><td>\D</td><td>任何非数字字符</td></tr><tr><td>\w</td><td>任何单个单词字符，包括字母和下划线</td></tr><tr><td>\W</td><td>任何单个非单词字符</td></tr><tr><td>*</td><td>匹配上一个字符0次或无数次</td></tr><tr><td>+</td><td>匹配上一个字符1次或无数次</td></tr><tr><td>?</td><td>匹配上一个字符0次或1次   &#x2F;   非贪婪匹配</td></tr><tr><td>{}</td><td>重复</td></tr><tr><td>{,}</td><td>重复，最小次数到最大次数</td></tr><tr><td>()</td><td>捕获   &#x2F;   分组</td></tr><tr><td>\1</td><td>存储第一次捕获</td></tr><tr><td>\2</td><td>存储第二次捕获</td></tr><tr><td>\n</td><td>存储第n次捕获</td></tr><tr><td>^</td><td>以某字符串开头</td></tr><tr><td>$</td><td>以某字符串结尾</td></tr><tr><td>[]</td><td>一组字符中的任何一个字符</td></tr><tr><td>[^]</td><td>除了一组字符以外的任何字符</td></tr><tr><td>|</td><td>或者</td></tr><tr><td>\</td><td>转义符</td></tr><tr><td>(?&#x3D;…)</td><td>Positive look-ahead. Matches if … matches next, but doesn’t consume any of the string</td></tr><tr><td>(?!…)</td><td>Negative look-ahead. Matches if … doesn’t match next</td></tr></tbody></table><h4 id="2、正则表达式在DNA序列中的示例"><a href="#2、正则表达式在DNA序列中的示例" class="headerlink" title="2、正则表达式在DNA序列中的示例"></a>2、正则表达式在DNA序列中的示例</h4><table><thead><tr><th>正则表达式</th><th>示例</th><th>意义</th></tr></thead><tbody><tr><td>AGA</td><td>T<strong>AGA</strong>TC</td><td>匹配AGA</td></tr><tr><td>^AGA</td><td><strong>AGA</strong>TGC</td><td>匹配处于开头位置的AGA</td></tr><tr><td>TAA$</td><td>AAG<strong>TAA</strong></td><td>匹配处于末尾位置的TAA</td></tr><tr><td>A.T</td><td>AA<strong>ACT</strong>G</td><td>匹配A和T以及两者之间任意一个字符（除换行符）</td></tr><tr><td>A.*T</td><td>C<strong>ATATCT</strong></td><td>匹配A后面跟着任意数量的字符，然后是T（贪婪匹配）</td></tr><tr><td>A.*?T</td><td>C<strong>AT</strong>ATCT</td><td>匹配A后面跟着任意数量的字符，然后是T（非贪婪匹配）</td></tr><tr><td>(A.*?T)</td><td>C<strong>AT</strong>ATCT</td><td>捕获A后面跟着任意数量的字符，然后是T(非贪婪匹配)</td></tr><tr><td>A{5}</td><td>T<strong>AAAAA</strong>TC</td><td>匹配5个连续的A</td></tr><tr><td>TA{2,4}CG</td><td>C<strong>TAAACG</strong>A</td><td>匹配T，跟着两个至4个范围的A，跟着CG</td></tr><tr><td>[AT]CG</td><td>CCT<strong>TCG</strong>A</td><td>匹配ACG或TCG</td></tr><tr><td>[AA|CC|TT]CG</td><td>A<strong>CCCG</strong>TA</td><td>匹配AA或CC或TT，然后跟着CG</td></tr><tr><td>A(CG){3}T</td><td>G<strong>ACGCGCGT</strong>A</td><td>匹配A，3个CG，跟着T</td></tr><tr><td>((.)(.)\3\2)</td><td>GA<strong>ATTA</strong>C</td><td>捕获4个连续字符，第1和第4个相同，第2和第3个相同</td></tr><tr><td>A\.T</td><td>TCG<strong>A.T</strong>AA</td><td>匹配A.T，因为点被转义</td></tr><tr><td>AAA(?&#x3D;TAG|TGA|TAA)</td><td>T<strong>AAA</strong>TGAT</td><td>匹配后面跟着TAG或TGA或TAA的AAA</td></tr></tbody></table><h3 id="Perl模块"><a href="#Perl模块" class="headerlink" title="Perl模块"></a>Perl模块</h3><h3 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h3><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>利用重定向符“&gt;”将文件内容赋值给变量</p><p><code>perl inputs_as_an_array.pl &lt; temp.txt</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span> @input_line = &lt;STDIN&gt;; <span class="comment">#将temp.txt中的内容按照每行为一个元素传递给@input_line数组</span></span><br><span class="line"><span class="comment">#当不利于重定向时，可手动从键盘敲入@input_line数组的每个元素，回车键输入下一个元素，CTRL+D终止输入</span></span><br></pre></td></tr></table></figure><p>利用@ARGV进行参数传递至脚本内部。当perl脚本运行时，从命令行上传递给它的参数存储在内建数组@ARGV中，@ARGV是perl默认用来接收参数的数组，可以有多个参数，$ARGV[0]是表示接收到的第一个参数，$ARGV[1]表示第二个。使用方法为：<code>perl my.pl $ARGV[0] $ARGV[1]</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($#ARGV &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">die</span> <span class="string">&quot;please provide a command line argument\n&quot;</span>;</span><br><span class="line">&#125; <span class="comment">#判断是否输入了命令行参数</span></span><br><span class="line"><span class="keyword">my</span> $seq = $ARGV[<span class="number">0</span>]; <span class="comment">#$ARGV[0]表示第一个参数</span></span><br><span class="line"><span class="keyword">my</span> $shorter_seq = $ARGV[<span class="number">1</span>]; <span class="comment">#$ARGV[1]表示第二个参数</span></span><br></pre></td></tr></table></figure><p>利用<SDTIN>标准输入</SDTIN></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">&quot;Enter a motif to search for: &quot;</span>;</span><br><span class="line">$motif = &lt;STDIN&gt;;</span><br></pre></td></tr></table></figure><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p>1、perl中的chomp函数将去掉行尾换行符；</p><p>2、eval函数用法：块中如果有一个语法错误或者运行时错误，或者一个”die” 语句被执行，”eval” 返回undef在标量上下文环境或者一个空的列表在列表环境。$@是存放错误信息的；</p><p>3、perl的qr函数用法：创建正则表达式。此函数将其STRING引用为正则表达式。STRING的插值方式与m&#x2F;PATTERN&#x2F;中的PATTERN相同；这个函数返回一个Perl值，它可以用来代替相应的&#x2F;STRING&#x2F;表达式。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chomp</span>($motif);</span><br><span class="line"><span class="keyword">eval</span>&#123; <span class="regexp">qr/$motif/</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> ($@)&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;motif $motif is a an illegal regular expression!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><p><a href="https://www.perlforbiologists.org/#">Perl for Biologists</a></p><p><a href="https://blog.csdn.net/u014703817/article/details/32702957">(22条消息) perl函数说明(eval)_易水寒江的博客-CSDN博客_eval perl</a></p><p><a href="https://www.cnblogs.com/zhaoyangjian724/p/6199997.html">perl eval - czcb - 博客园 (cnblogs.com)</a></p><p><a href="http://www.manongjc.com/detail/31-asywzopegrdjwrh.html">Perl qr实例讲解 - 码农教程 (manongjc.com)</a></p><p><a href="https://www.learnfk.com/perl/perl-pos.html">Perl pos函数 - 基础教程 - 无涯教程网 (learnfk.com)</a></p><p>[(22条消息) <a href="https://blog.csdn.net/gsjthxy/article/details/89003539">Perl]Perl贪婪匹配、非贪婪匹配、占有优先匹配的區別和應用_元直数字电路验证的博客-CSDN博客_perl 贪婪匹配</a></p><p><a href="https://cdn.modb.pro/db/538048">perl–用die处理致命错误&amp;用warn送出警告信息&amp;自动检测致命错误 - 墨天轮 (modb.pro)</a></p><p><a href="https://blog.csdn.net/cumao2792/article/details/108574913">(22条消息) 如何判断Perl中是否存在文件_cumao2792的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/u012299594/article/details/81914265">(22条消息) Perl文件目录操作_Hello Hunk的博客-CSDN博客_perl怎么进入文件夹</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> perl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提取两文件的不同行</title>
      <link href="/2022/09/24/3%E7%A7%8Dlinux%E4%B8%8B%E6%8F%90%E5%8F%96%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8D%E5%90%8C%E8%A1%8C%E5%86%85%E5%AE%B9%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2022/09/24/3%E7%A7%8Dlinux%E4%B8%8B%E6%8F%90%E5%8F%96%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8D%E5%90%8C%E8%A1%8C%E5%86%85%E5%AE%B9%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文件的情景：prank.sh.completed是prank.sh的子集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat prank.sh prank.sh.completed | sort | uniq -d &gt;temp.txt</span><br><span class="line"></span><br><span class="line">cat prank.sh temp.txt | sort | uniq -u &gt; different.txt</span><br></pre></td></tr></table></figure><span id="more"></span><p>（以下内容搭个便车）</p><p>前两天，利用cafe4.2的版本分析，根据本地以及网上教程，</p><p><em><u><strong>在网上下载了各种现成的脚本，真方便。</strong></u></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cafe 01cafe.sh</span><br></pre></td></tr></table></figure><p> 上述命令运行报错（忘了记录）。原因：缺少树的祖先位置的λ分类。添加即可。</p><p>在提取扩张收缩的基因家族ID时，cafetutorial_report_analysis.py脚本运行报错（忘了记录）。原因：缺少cafecore moduel。解决方法：github上搜索并下载cafecore.py，添加到python脚本目录下。</p><p>运行时又有了以下报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File &quot;./cafecore.py&quot;, line 8</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">^SyntaxError: invalid syntax     </span><br></pre></td></tr></table></figure><p>感谢stackoverflow上的用户user2357112，他&#x2F;她指出原因是没有真正下载到cafecore.py这个脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“You&#x27;re not downloading the script. You&#x27;re downloading a GitHub web page with the script and a whole bunch of other stuff on it, like GitHub navigation and a search bar and clickable line numbers.”</span><br></pre></td></tr></table></figure><p>于是下载了python而非html语言格式的cafecore.py脚本。到此，单独运行脚本是成功的，因为出现了脚本的使用参数等信息（如下）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">python cafetutorial_report_analysis.py</span><br><span class="line"></span><br><span class="line">|**Error 1: -i must be defined |</span><br><span class="line"></span><br><span class="line">usage: cafetutorial_report_analysis.py [-h] [-i INPUT_FILE]</span><br><span class="line">                                       [-e USER_ERR_START] [-d USER_TMP_DIR]</span><br><span class="line">                                       [-f FIRST_RUN] [-c CURVE_OPTION]</span><br><span class="line">                                       [-t ERROR_TRIES] [-l USER_LOG_FILE]</span><br><span class="line">                                       [-o OUTPUT_FILE] [-s IND_MIN]</span><br><span class="line">                                       [-v VERBOSE]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help         show this help message and exit</span><br><span class="line">  -i INPUT_FILE      A CAFE shell script with the full CAFE path in the</span><br><span class="line">                     shebang line, the load, tree, and lambda commands. These</span><br><span class="line">                     lines will be read and incorporated into the caferror</span><br><span class="line">                     shell script.</span><br><span class="line">  -e USER_ERR_START  The starting point for the grid search. Should be between</span><br><span class="line">                     0 and 1. Default: 0.4</span><br><span class="line">  -d USER_TMP_DIR    A directory in which all caferror files will be stored.</span><br><span class="line">                     If none is specified, it will default to caferror_X, with</span><br><span class="line">                     X being some integer one higher than the last directory.</span><br><span class="line">  -f FIRST_RUN       Boolean option to perform a pre-error model run (1) or</span><br><span class="line">                     not (0). Default: 0</span><br><span class="line">  -c CURVE_OPTION    Boolean option. caferror can either perform the grid</span><br><span class="line">                     search (0) or search a pre-specified space (1). Default:</span><br><span class="line">                     0</span><br><span class="line">  -t ERROR_TRIES     A list of error values to search over. Note: -c MUST be</span><br><span class="line">                     set to 1 to use these values. Enter as a comma delimited</span><br><span class="line">                     string, ie -t 0.1,0.2,0.3</span><br><span class="line">  -l USER_LOG_FILE   Specify the name for caferror&#x27;s log file here. Default:</span><br><span class="line">                     caferrorLog.txt</span><br><span class="line">  -o OUTPUT_FILE     Output file which stores only the error model and score</span><br><span class="line">                     for each run. Default: caferror_default_output.txt</span><br><span class="line">  -s IND_MIN         Boolean option to specify whether to perform only the</span><br><span class="line">                     global error search (0) or continue with individual</span><br><span class="line">                     species minimizations (1). Default: 0</span><br><span class="line">  -v VERBOSE         Boolean option to have detailed information for each CAFE</span><br><span class="line">                     run printed to the screen (1) or not (0). Default: 1</span><br></pre></td></tr></table></figure><p>当加上输入文件以及参数时，又有了新的报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python python_scripts/cafetutorial_report_analysis.py -i reports/report_run1.cafe -o reports/summary_run1 -r 0</span><br></pre></td></tr></table></figure><p>报错内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> File &quot;cafetutorial_report_analysis.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">    import sys, os, argparse, cafecore as cafecore</span><br><span class="line">  File &quot;./cafecore.py&quot;, line 420, in &lt;module&gt;</span><br><span class="line">    treestring = Tree[Tree.index(&quot;(&quot;):];</span><br><span class="line">NameError: name &#x27;Tree&#x27; is not defined</span><br></pre></td></tr></table></figure><p>查看输入文件的格式与脚本内容，苦思冥想之后将脚本中匹配tree改为匹配Tree，因为输入文件中是T大写，重新运行上述脚本，意料之中，又有了新的报错（如下）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File &quot;cafetutorial_report_analysis.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">    import sys, os, argparse, cafecore as cafecore</span><br><span class="line">  File &quot;./cafecore.py&quot;, line 491, in &lt;module&gt;</span><br><span class="line">    printWrite(caferrorLog, 1, &quot;# CAFE path set as:&quot;, CafePath, pad);</span><br></pre></td></tr></table></figure><p>咨询了大佬，可能是没有全路径的问题，加上全路径后，还是报错，瞬时全身乏力，通关无望。</p><p>于是找到之前做过案例的文件，查看相关文件是否有差异。将本地所有python脚本上传并运行，直接运行成功。</p><p><em><strong><u>最终发现，有时候网上的脚本真坑人。</u></strong></em></p><p>没午休，回想这些报错，头又大了！</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> shell笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用TBtools绘制简单的共线性图</title>
      <link href="/2022/07/14/circos/"/>
      <url>/2022/07/14/circos/</url>
      
        <content type="html"><![CDATA[<p>学习目标：长颈鹿基因组文章中的基因组共线性关系图。</p><img src="/2022/07/14/circos/qiwang.jpg" class title="This is an example image"><h3 id="首先测试一下TBtools中在Graphics下面Advanced-Circos工具。"><a href="#首先测试一下TBtools中在Graphics下面Advanced-Circos工具。" class="headerlink" title="首先测试一下TBtools中在Graphics下面Advanced Circos工具。"></a><strong>首先测试一下TBtools中在Graphics下面Advanced Circos工具。</strong></h3><p>该工具下的三个输入框分别输入三个文件，文件中每列以制表符分隔开来。</p><img src="/2022/07/14/circos/qiwang.jpg" class title="qiwang"><p>①染色体的名字及其长度，共两列；</p><p>②染色体上所有元件特征的位置信息，分别为染色体名称、序列元件名称、序列原件的起始位置和序列原件的终止位置，共四列；</p><p>③同一元件在不同染色体的位置信息，分别为染色体1的名称、元件在染色体1的起始位置、染色体1的终止位置、染色体2的名称、元件在染色体2的起始位置、染色体2的终止位置。</p><p>为了方便测试，简单编辑了三个文件，格式如下</p><img src="/2022/07/14/circos/circos1.jpg" class title="circos1"><p>将这三个文件分别拖入输入框后，点击绘图，得到以下结果，表明没有软件报错，运行环境正常，如果用基因组大数据来绘图时，若文件格式正确，应该不会出问题。</p><img src="/2022/07/14/circos/circos2.jpg" class title="circos2"><h3 id="接下来是如何在公共数据库中获取基因组数据，以及如何进行数据转换，得到circos工具需要的格式。"><a href="#接下来是如何在公共数据库中获取基因组数据，以及如何进行数据转换，得到circos工具需要的格式。" class="headerlink" title="接下来是如何在公共数据库中获取基因组数据，以及如何进行数据转换，得到circos工具需要的格式。"></a><strong>接下来是如何在公共数据库中获取基因组数据，以及如何进行数据转换，得到circos工具需要的格式。</strong></h3><p>以多孔鹿角珊瑚（Acropora millepora）基因组为例，该物种基因组是目前珊瑚虫纲为数不多的组装为染色体水平的基因组，包括已装配的14个染色体和为装配的部分。</p><p>NCBI下载GFF（general feature format）文件后，发现14个染色体的长度在以“##sequence-region NC_”开头的行中，所以可以利用此特征进行grep得到染色体长度信息，这样就可以轻松准备好第一个文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;##sequence-region NC_&quot; GCF_013753865.1_Amil_v2.1_genomic.gff |awk &#x27;&#123;print $2,$4&#125;&#x27; OFS=&quot;\t&quot; &gt; coral-chrlen.txt</span><br></pre></td></tr></table></figure><p>第二个文件需要染色体上所有元件特征的位置信息，基因组上的元件一般包括gene、exon、mRNA等，一般取gene进行可视化，那么需要将GFF文件中装配在染色体上的并且第三列为gene的行提取出来。也就是提出”NC_xxxx.x Gnomon gene“格式的行，因此可以得到染色体上所有基因的所有信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;NC_&quot; GCF_013753865.1_Amil_v2.1_genomic.gff |grep $&#x27;\t&#x27;Gnomon$&#x27;\t&#x27;gene$&#x27;\t&#x27; &gt; chr-gene.txt</span><br></pre></td></tr></table></figure><img src="/2022/07/14/circos/circos3.jpg" class title="circos3"><p>根据文件特征，利用awk和grep提取第二个文件的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F&#x27;[\t;]&#x27; -v OFS=&quot;\t&quot; &#x27;&#123;print $1,$13,$4,$5&#125;&#x27; chr-gene.txt | sed &#x27;s/gene=//g&#x27; &gt; coral-genome-feature-list.txt</span><br></pre></td></tr></table></figure><p>此处得到的文件中，存在极少部分的行，其第二列并不是基因名，这是GFF文件中这一行与其他行的格式不一样导致的，在本测试中有97行出现错误，即基因名字为”gbkey&#x3D;Gene“，考虑到这些基因不足总基因数的0.5%，选择直接去除这些行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;/gbkey=Gene/d&#x27; coral-genome-feature-list.txt  #删除带有gbkey=Gene的行</span><br></pre></td></tr></table></figure><p>下面制作第三个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print $2&#125;&#x27; coral-genome-feature-list.txt &gt; all-genes-list.txt  #将所有基因提取出来</span><br><span class="line"></span><br><span class="line">for i in `cat all-genes-list.txt`;do num=`grep $i coral-genome-feature-list.txt|wc -l`;if [ $num -ne 1 ];then echo $i;fi;done &gt; linked-gene.txt  #将具有连接关系的基因打印出来，由于本次测试是一个基因组，没有相同的基因位于两个不同的染色体上。因此为了展示，手动修改一个基因，即将第二个染色体的第一个基因修改为第一个染色体第一个基因的名字。重新运行此步骤</span><br><span class="line"></span><br><span class="line">sort linked-gene.txt |uniq &gt; linked-gene-final.txt  #去重复，得到想要展示的基因名称列表</span><br><span class="line"></span><br><span class="line">for i in `cat linked-gene-final.txt`;do grep $i coral-genome-feature-list.txt;done |sed &#x27;N;s/\n/ \t/&#x27; &gt; coral-linked-info.txt  #得到第三个文件的雏形</span><br><span class="line"></span><br><span class="line">for i in `cat linked-gene-final.txt`;do sed -i -e &quot;s/\t$i//g&quot; -e &quot;s/\s\t/\t/g&quot; coral-linked-info.txt;done #得到最终的第三个输入文件</span><br></pre></td></tr></table></figure><h3 id="最后将得到的三个文件导入到TBtools软件中，绘图。"><a href="#最后将得到的三个文件导入到TBtools软件中，绘图。" class="headerlink" title="最后将得到的三个文件导入到TBtools软件中，绘图。"></a><strong>最后将得到的三个文件导入到TBtools软件中，绘图。</strong></h3><p>由于基因太多，基因名展示在图上重叠在一起一片漆黑，调整图片位置都卡好久，但是整体上看是符合预期的。因此，此方法适合选择部分基因来展示，不适合所有基因都进行共线性展示的情况。</p><img src="/2022/07/14/circos/circos4.jpg" class title="circos4"><h3 id="为了方便展示，并美化图，将genome-feature-list文件简化，得到以下。"><a href="#为了方便展示，并美化图，将genome-feature-list文件简化，得到以下。" class="headerlink" title="为了方便展示，并美化图，将genome-feature-list文件简化，得到以下。"></a><strong>为了方便展示，并美化图，将genome-feature-list文件简化，得到以下。</strong></h3><img src="/2022/07/14/circos/circos5.jpg" class title="circos5"><p>进一步调整颜色得到最终的circos图，根据自己的需要调整图片各元素的颜色和位置。</p><img src="/2022/07/14/circos/circos6.jpg" class title="circos6"><h3 id="为什么做circos图？"><a href="#为什么做circos图？" class="headerlink" title="为什么做circos图？"></a><strong>为什么做circos图？</strong></h3><p>展示基因组各种元件的信息，比如新测基因组与已测基因组的共线性情况；</p><p>表示基因的复制情况等；</p><p>……</p><p>虽然TBtools不如circos软件的命令行模式灵活，但该工具为非编程用户提供了极大的便利，值得学习。</p><p>若绘制以下复杂的基因组信息图，建议使用circos命令行模式的软件。</p><img src="/2022/07/14/circos/7.png" class width="7"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">计算染色体长度</span></span><br><span class="line"><span class="meta">#</span><span class="bash">生成染色体文件 7列</span></span><br><span class="line"><span class="meta">#</span><span class="bash">生成窗口文件， 窗口大小50Kb</span></span><br><span class="line"><span class="meta">#</span><span class="bash">计算每个窗口平均GC含量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">计算每个窗口基因条数</span></span><br><span class="line"><span class="meta">#</span><span class="bash">计算每个窗口重复序列含量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">共线性模块鉴定</span></span><br></pre></td></tr></table></figure><h3 id="傻瓜式利用TBtools绘制两基因组的共线性关系图"><a href="#傻瓜式利用TBtools绘制两基因组的共线性关系图" class="headerlink" title="傻瓜式利用TBtools绘制两基因组的共线性关系图"></a><strong>傻瓜式利用TBtools绘制两基因组的共线性关系图</strong></h3><p>要想制作推文最初的C图，可以使用Graphics中的Comparative genomecs下的两个工具，即One Step MCScanX和Dual Systeny Plot for MCScanX，前者用于处理绘图所需的正确格式的文件，后者用于两个基因组关系的绘图。</p><p>只需要分别准备两个物种的基因组文件和GFF文件即可，这四个文件拖入第一个工具，运行耗时比较久（半小时左右？），这样就得到第二个工具的输入文件，然后拖入点击秒出图。</p><img src="/2022/07/14/circos/2-1.jpg" class title="2-1"><img src="/2022/07/14/circos/2-2.jpg" class title="2-2"><p>此工具不用任何思考，只需点点点就能得到这个。</p><img src="/2022/07/14/circos/2-3.jpg" class title="2-3"><p>注：</p><p>①最好使用两个染色体水平的基因组作图，上面的基因组仅组装到contig水平，所以看不出什么进化事件；</p><p>②可以自行编辑第一步骤得到的ctl文件，通过保留想要展示的片段，可将其他片段的名字直接删除；</p><p>③颜色可以编辑。</p><p>④NGenomeSyn是专门绘制基因组共线性的命令行软件，功能更加详细，更加灵活。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a><strong>参考：</strong></h3><p><a href="https://www.jianshu.com/p/9e4ad7d4881b">基因组Circos图绘制 - 简书 (jianshu.com)</a></p><p><a href="https://wenku.baidu.com/view/9564df5701768e9951e79b89680203d8ce2f6adc.html">TBtools绘制Circos图小攻略 - 百度文库 (baidu.com)</a></p><p><a href="http://events.jianshu.io/p/2334a6346941">用TBtools，快速高效实现基因组共线性分析与可视化， 赞！ - 简书 (jianshu.io)</a></p><p><a href="https://www.jianshu.com/p/45bece9a0518?u_atoken=e36c9fae-6516-444d-8da6-020253c10ad5&u_asession=01RZQiEOOy5y2FZHSLGFuNm6o66TPOTCURqsOSgM91FwilwBRdfoa-E7OHE3in8YfdX0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K8awO_gvLOfVsK91fZVeAlxyuYfe7vWV-zsHJifFo5DumBkFo3NEHBv0PZUm6pbxQU&u_asig=05MnJ8y49Xl-DNbLqKN3ifjC9q2vGIV6OHqf9Su8nn0C3Xb8xiMVw20TZhbcICcUTvoA-bFWqXeIGcpO0swmce1Vv092BNyGYTt6Kc0QohIJhJFDhJgu5XRQUdG9FMAJ6MJ0Sq6IKMJ_1nFNQSQh4W6SRnMn4xAY1-5tBawniJyQz9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzUw15I7yC7kCIaO9J9SWLL5voCuZL7lUVMjY79jYx8u2fqft3yiexPr1Pj5ASov3mu3h9VXwMyh6PgyDIVSG1W_3XTunNP28J065ybLQMiTTIRox2heX479OC2z3E-OFfsT7f3EhRgdlsw_jrTQ1f-hlskxi08aOPMtTDIEjMXOAmWspDxyAEEo4kbsryBKb9Q&u_aref=MGJwi+xsSXP/s2pFuWdmzWWTGmU=">如何高效而且优雅地比较多物种的不同基因组区域？ - 简书 (jianshu.com)</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>词云图</title>
      <link href="/2022/03/10/wordcloud/"/>
      <url>/2022/03/10/wordcloud/</url>
      
        <content type="html"><![CDATA[<p>利用wordcloud2包制作词云图，对数据的词频进行可视化。</p><span id="more"></span><p>准备excel表格，包括关键词和频数。例如：</p><table><thead><tr><th align="center">word</th><th align="center">freq</th></tr></thead><tbody><tr><td align="center">分子遗传学</td><td align="center">9</td></tr><tr><td align="center">分类学</td><td align="center">9</td></tr><tr><td align="center">生物地理学</td><td align="center">8</td></tr><tr><td align="center">古生物学</td><td align="center">6</td></tr><tr><td align="center">生态学</td><td align="center">10</td></tr><tr><td align="center">分子系统学</td><td align="center">8</td></tr><tr><td align="center">水生动物学</td><td align="center">10</td></tr><tr><td align="center">微生物</td><td align="center">7</td></tr><tr><td align="center">基因组学</td><td align="center">8</td></tr><tr><td align="center">地质学</td><td align="center">5</td></tr><tr><td align="center">气候学</td><td align="center">6</td></tr><tr><td align="center">环境海洋学</td><td align="center">7</td></tr><tr><td align="center">进化生物学</td><td align="center">9</td></tr></tbody></table><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setwd(<span class="string">&quot;D:/Desktop/词云图&quot;</span>) <span class="comment">#设置工作路径</span></span><br><span class="line">dir()</span><br><span class="line">install.packages(<span class="string">&quot;wordcloud2&quot;</span>) <span class="comment">#安装wordcloud2包</span></span><br><span class="line">library(wordcloud2)</span><br><span class="line">install.packages(<span class="string">&quot;openxlsx&quot;</span>)</span><br><span class="line">library(openxlsx)</span><br><span class="line">wordmap&lt;-read.xlsx(<span class="string">&quot;wordcloud.xlsx&quot;</span>)</span><br><span class="line">wordcloud2(wordmap,size=<span class="number">0.3</span>,shape=<span class="string">&#x27;cardioid&#x27;</span>,color=<span class="string">&quot;random-light&quot;</span>) <span class="comment">#可视化，关于更多参数，可由help(&quot;wordcloud2&quot;)命令查看</span></span><br></pre></td></tr></table></figure><p>可得到以下：</p><img src="/2022/03/10/wordcloud/0310-1.png" class title="0310-1"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分子进化生物学学习框架</title>
      <link href="/2022/03/08/need-learn/"/>
      <url>/2022/03/08/need-learn/</url>
      
        <content type="html"><![CDATA[<img src="/2022/03/08/need-learn/learn_141948.png" class title="learn_141948"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 学习框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基因家族鉴定及分析</title>
      <link href="/2022/01/18/%E5%9F%BA%E5%9B%A0%E5%AE%B6%E6%97%8F%E9%89%B4%E5%AE%9A%E5%8F%8A%E5%88%86%E6%9E%90/"/>
      <url>/2022/01/18/%E5%9F%BA%E5%9B%A0%E5%AE%B6%E6%97%8F%E9%89%B4%E5%AE%9A%E5%8F%8A%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><strong>单物种基因家族鉴定及分析</strong></p><span id="more"></span><div class="row">    <embed src="./gene.pdf" width="100%" height="550" type="application/pdf"></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda安装samtools时报错</title>
      <link href="/2022/01/17/conda%E5%AE%89%E8%A3%85samtools%E6%97%B6%E6%8A%A5%E9%94%99/"/>
      <url>/2022/01/17/conda%E5%AE%89%E8%A3%85samtools%E6%97%B6%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p><strong>当利用conda工具samtools后，如出现报错信息:</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error while loading shared libraries: libcrypto.so.1.0.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p><strong>解决方法如下</strong></p><span id="more"></span><p>（1）在miniconda目录下samtools软件目录，进入lib文件查找libcrypto.so.*文件，对其进行软连接重命名至libcrypto.so.1.0.0。参考<a href="https://blog.csdn.net/ET_April/article/details/111405941">(14条消息) 解决samtools: error while loading shared libraries: libcrypto.so.1.0.0: cannot open shared object file_ET_April的博客-CSDN博客</a> 和<a href="https://blog.csdn.net/weixin_43960055/article/details/114992790">(14条消息) samtools: error while loading shared libraries: libcrypto.so.1.0.0: cannot open shared ……的解决方法_wyh0908的博客-CSDN博客</a></p><p>（2）有人说samtools的版本已经在1.9以上了，但是conda安装的samtools版本依然是1.7。所以建议强制安装1.9版本：<code>conda install -c bioconda samtools=1.9 --force-reinstall</code><br>参考<a href="https://www.cnblogs.com/jessepeng/p/14766638.html">【samtools】运行报错: error while loading shared libraries：libcrypto.so.1.0.0或libncurses.so.5或libtinfow.so.5 - 小xuo生 - 博客园 (cnblogs.com)</a></p><p>（3）当尝试以上两种方法之后，均不能解决报错。结果查询，可能是由于samtools的依赖文件与当前环境产生冲突。于是重新创建新的环境，进行安装，果然新环境下安装的samtools可以正常使用。虽然不能从根本上解决问题，但至少可以使用它了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda create -n samtools</span><br><span class="line">conda activate samtools</span><br><span class="line">conda install samtools</span><br><span class="line">samtools</span><br></pre></td></tr></table></figure><img src="/2022/01/17/conda%E5%AE%89%E8%A3%85samtools%E6%97%B6%E6%8A%A5%E9%94%99/202.png" class width="202"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 解决报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向国家生物信息中心数据库传输文件</title>
      <link href="/2022/01/14/%E5%88%A9%E7%94%A8ftp%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2022/01/14/%E5%88%A9%E7%94%A8ftp%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>利用Filezilla软件或Shell终端（FTP客户端）通过FTP协议向远程服务器（FTP服务器）进行大文件的传输</strong></p><p><strong>通过Linux中的ascp工具上传文件</strong></p><span id="more"></span><h3 id="1、通过Filezilla软件直接拖拽"><a href="#1、通过Filezilla软件直接拖拽" class="headerlink" title="1、通过Filezilla软件直接拖拽"></a><strong>1、通过Filezilla软件直接拖拽</strong></h3><p><strong>我是通过shell终端上传的，在Filezilla软件中的操作细节可能没遇到，比如如何设置二进制模式，若利用此途径可自行查阅相关帖子。</strong></p><p><strong>登录：输入地址、用户名和密码，然后快速链接</strong></p><img src="/2022/01/14/%E5%88%A9%E7%94%A8ftp%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/1.png" class width="1"><p><strong>从左侧本地文件框中直接拖拽至右侧FTP远程服务器端位置，或者右键单击，点击上传即可</strong></p><img src="/2022/01/14/%E5%88%A9%E7%94%A8ftp%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/2.png" class width="2"><h3 id="2、通过Shell终端传输（从下载ftp工具到传输文件）"><a href="#2、通过Shell终端传输（从下载ftp工具到传输文件）" class="headerlink" title="2、通过Shell终端传输（从下载ftp工具到传输文件）"></a>2、通过Shell终端传输（从下载ftp工具到传输文件）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ftp  #若ftp回车后显示没有安装，则可通过此命令进行安装</span><br><span class="line"></span><br><span class="line">ftp 服务器地址  #连接远程服务器</span><br><span class="line">Name: 用户名</span><br><span class="line">Password: 密码 #登录成功</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#以上传测序数据为例###</span></span></span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> <span class="built_in">cd</span> GSA              <span class="comment">#同样地，利用cd命令切换路径</span></span></span><br><span class="line">250 Directory changed to /GSA  </span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> binary              <span class="comment">#上传二进制模式文件</span></span></span><br><span class="line">200 Command TYPE okay.</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> prompt              <span class="comment">#交互模式</span></span> </span><br><span class="line">Interactive mode off.</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> mput *              <span class="comment">#利用mput命令上传所在目录下所有文件 下载时的命令为ftp&gt; get filename</span></span></span><br></pre></td></tr></table></figure><p><strong>可优化：①利用递归方法进行目录下文件及子目录地上传</strong></p><p><strong>当上传结束时会显示以下信息</strong></p><img src="/2022/01/14/%E5%88%A9%E7%94%A8ftp%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/3.png" class width="3"><h3 id="3、利用ascp工具上传文件"><a href="#3、利用ascp工具上传文件" class="headerlink" title="3、利用ascp工具上传文件"></a>3、利用ascp工具上传文件</h3><p><strong>无奈文件太大，利用ftp传输太慢，然后转用ascp命令行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/data1/wutianzhen2021/.aspera/connect/bin/ascp -P33001 -i /root/data1/wutianzhen2021/temp/F14HTSECKF0151/aspsub_rsa -QT -l100m -k1 -d /root/data1/wutianzhen2021/temp/F14HTSECKF0151/upload/*/*.gz aspsub@submit.big.ac.cn:uploads/chaisiminendeavor@163.com_2bac8272</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p><strong>①下载Aspera Connect插件（下载、解压、运行sh文件）</strong></p><p><strong>②报错ascp: Failed to open TCP connection for SSH, exiting.时；可在root用户尝试以下命令解决防火墙问题</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 33001 -j ACCEPT</span><br><span class="line">iptables -I OUTPUT -p tcp --dport 33001 -j ACCEPT</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转录组测序研究进展</title>
      <link href="/2022/01/05/%E5%85%B3%E4%BA%8E%E8%BD%AC%E5%BD%95%E6%9C%AC/"/>
      <url>/2022/01/05/%E5%85%B3%E4%BA%8E%E8%BD%AC%E5%BD%95%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>转录组（Transcriptome）是指特定细胞或组织中全部转录产物，包括信使RNA，核糖体RNA、转运RNA 以及非编码RNA。</strong></p><h4 id="1-转录组学是什么？"><a href="#1-转录组学是什么？" class="headerlink" title="1 转录组学是什么？"></a><strong>1 转录组学是什么？</strong></h4><p>​        转录组学是从整体转录水平系统研究基因转录图谱并揭示复杂生物学通路和性状调控网络分子机制的学科。</p><h4 id="2-转录组测序是什么？"><a href="#2-转录组测序是什么？" class="headerlink" title="2 转录组测序是什么？"></a><strong>2 转录组测序是什么？</strong></h4><p>​        转录组测序（RNA-seq）就是利用高通量测序技术将细胞或组织中全部或部分mRNA、small RNA和no-coding RNA 进行测序分析的技术</p><h4 id="3-可以用来解决什么问题？"><a href="#3-可以用来解决什么问题？" class="headerlink" title="3 可以用来解决什么问题？"></a><strong>3 可以用来解决什么问题？</strong></h4><p>​        ①检测与现有基因组序列相对应的转录本；②能发现和定量新的转录本；③基因转录的物种特异性和时空差异；④探究非编码RNA的调控机制；⑤单细胞转录组解析不同类型细胞的基因表达谱或空间分布情况。</p><blockquote><p>怎么理解转录本与基因之间的关系呢？</p><p>研究一个基因时应该首先确定研究该基因的哪个转录本</p><p>转录本其实就是基因通过转录形成的一种或多种可供编码蛋白质的成熟的mRNA</p></blockquote><img src="/2022/01/05/%E5%85%B3%E4%BA%8E%E8%BD%AC%E5%BD%95%E6%9C%AC/zhuanluben.png" class title="zhuanluben"><h4 id="4-转录组测序的一般流程和测序内容？"><a href="#4-转录组测序的一般流程和测序内容？" class="headerlink" title="4 转录组测序的一般流程和测序内容？"></a><strong>4 转录组测序的一般流程和测序内容？</strong></h4><h5 id="4-1-mRNA测序"><a href="#4-1-mRNA测序" class="headerlink" title="4.1 mRNA测序"></a><strong>4.1 mRN<img src="/2022/01/05/%E5%85%B3%E4%BA%8E%E8%BD%AC%E5%BD%95%E6%9C%AC/liuchengtu.png" class title="liuchengtu">A测序</strong></h5><p>​        利用mRNA 在3’ 端具有poly-A 的结构特点，富集出特定组织或细胞在特定时空条件下转录出来的不含内含子序列的mRNA 分子，反转录成cDNA 建库测序。</p><h5 id="4-2-small-RNA测序"><a href="#4-2-small-RNA测序" class="headerlink" title="4.2 small RNA测序"></a><strong>4.2 small RNA测序</strong></h5><p>​        Small RNA 是指长度在20-50 nt 的RNA 分子，包括miRNA、siRNA、snoRNA 和piRNA 等， 通过参与mRNA 降解、抑制翻译过程、促进异染色质形成和DNA 表观修饰等多种途径来调控生物学过程。根据small RNA 的5’ 端磷酸基和3’ 端羟基的结构特点，链接测序接头并筛选small RNA 测序文库进行测序。miRNA 在物种间的生物学功能较为保守，是small RNA 测序研究中的重点。</p><h5 id="4-3-lncRNA测序"><a href="#4-3-lncRNA测序" class="headerlink" title="4.3 lncRNA测序"></a><strong>4.3 lncRNA测序</strong></h5><p>​        长链非编码RNA（lncRNA） 是一类长度在200 nt 以上、无编码蛋白质功能的RNA 分子，往往具有很强的物种、组织特异性。部分lncRNA 位于基因的增强子区域，通过自身的转录而实现增强子的功能。lncRNA 调控方式多样且广泛存在于各类动植物细胞中，可以通过参与染色体结构形成以及与转录因子、蛋白质、RNA 前体、miRNA 结合等多种方式调节各类生物学分子的功能。部分lncRNA含有ploy-A 尾结构，因而在mRNA 的测序结果中往往包含部分lncRNA 序列信息。目前对于lncRNA 的研究，以寻找差异表达的lncRNA 分子入手，主要依据lncRNA 与关键编码基因的位置关系，进一步预测两者之间的调控关系。</p><p><strong>4.4 circRNA测序</strong></p><p>​        环状RNA（circRNA）具有特殊的稳定性良好的成环结构，不容易被RNA 酶降解，被认为在生物体内可以长效行使转录调控功能。同一段基因组序列可能会产生多种类型的circRNA 分子，外显子和内含子的不同剪切组合使得circRNA 可能包含多个外显子或内含子序列。circRNA 具有吸附miRNA分子的“海绵”作用，介入miRNA 对mRNA 的调控过程。</p><h5 id="4-5-全转录测序-Whole-transcriptome-sequencing"><a href="#4-5-全转录测序-Whole-transcriptome-sequencing" class="headerlink" title="4.5 全转录测序 Whole transcriptome sequencing"></a><strong>4.5 全转录测序 Whole transcriptome sequencing</strong></h5><p>​        全转录组测序（Whole transcriptome sequencing）能够测定样本中的全部完整的转录本，主要包括mRNA 和非编码RNA（lncRNA，circRNA和miRNA）。全转录本测序与常规RNA-seq 的区别主要是建库方式的不同。全转录组测序在建库过程中需分别建立2 个文库（mRNA+lncRNA+circRNA文库和miRNA 文库）或3 个文库（mRNA+lncRNA文库、circRNA 文库和miRNA 文库）。通过全转录组数据，不仅可以获得全部类型转录本的表达图谱，在此基础之上，对不同RNA 分子进行鉴定和注释，分析其编码蛋白和调控功能，并对RNA 分子之间的互作调控网络进行分析，从整体上全面系统的分析特定细胞在特定时空下的生物学特征。</p><h5 id="4-6-单细胞转录组测序-scRNA-seq"><a href="#4-6-单细胞转录组测序-scRNA-seq" class="headerlink" title="4.6 单细胞转录组测序  scRNA-seq"></a><strong>4.6 单细胞转录组测序  scRNA-seq</strong></h5><p>​        单细胞转录组测序技术是在单细胞水平研究整个转录组的技术，用于评估单个细胞间基因表达的差异，能避免细胞类型混杂而引入的假阴性结果，有可能识别出无法通过混合细胞检测到的罕见的细胞群体。</p><p>​        单细胞分离是scRNA-seq 的关键步骤，主要通过连续稀释、显微操作分离、荧光激活细胞分选（Fluorescence-activated cell sorting，FACS）和微流控分离（Microfluidic technology）等技术实现。</p><h4 id="5-构建文库的策略"><a href="#5-构建文库的策略" class="headerlink" title="5 构建文库的策略"></a>5 构建文库的策略</h4><h5 id="5-1-非链特异性文库（Non-strand-specific-library）"><a href="#5-1-非链特异性文库（Non-strand-specific-library）" class="headerlink" title="5.1 非链特异性文库（Non-strand-specific library）"></a><strong>5.1 非链特异性文库（Non-strand-specific library）</strong></h5><p>​        RNA 逆转录成双链cDNA，随机加上接头、不区分RNA 的链的信息的文库。测序时以双链cDNA 进行测序，无法区分mRNA 的转录方向。</p><img src="/2022/01/05/%E5%85%B3%E4%BA%8E%E8%BD%AC%E5%BD%95%E6%9C%AC/A.png" class title="A"><h5 id="5-2-链特异性文库（Strand-specific-library）"><a href="#5-2-链特异性文库（Strand-specific-library）" class="headerlink" title="5.2 链特异性文库（Strand-specific library）"></a><strong>5.2 链特异性文库（Strand-specific library）</strong></h5><p>​        以化学修饰标记一条链，比如通过重硫酸盐处理RNA 分子，或者在第二链cDNA 合成时引入dUTP，然后降解含有U 的链；</p><img src="/2022/01/05/%E5%85%B3%E4%BA%8E%E8%BD%AC%E5%BD%95%E6%9C%AC/BC.png" class title="BC"><p>​        以不同接头连接RNA 分子或合成cDNA 链的5’ 和3’ 末端，来区分正反义链;</p><img src="/2022/01/05/%E5%85%B3%E4%BA%8E%E8%BD%AC%E5%BD%95%E6%9C%AC/D.png" class title="D"><img src="/2022/01/05/%E5%85%B3%E4%BA%8E%E8%BD%AC%E5%BD%95%E6%9C%AC/EFGH.png" class title="EFGH"><img src="/2022/01/05/%E5%85%B3%E4%BA%8E%E8%BD%AC%E5%BD%95%E6%9C%AC/TUZHU.png" class title="TUZHU"><p>​        经科研人员测评，C和E两种构建文库方法效果较好。</p><h4 id="6-数据处理流程"><a href="#6-数据处理流程" class="headerlink" title="6 数据处理流程"></a>6 数据处理流程</h4><p>​        <strong>用于比较不同组别之间基因水平或转录本水平的定量差异时，其分析基本流程包括以下：</strong></p><h5 id="6-1-原始数据预处理"><a href="#6-1-原始数据预处理" class="headerlink" title="6.1 原始数据预处理"></a><strong>6.1 原始数据预处理</strong></h5><p>​        常用质控软件包括：Trimmomatic、RSeQC、FASTX、Trim Galore等，QC 后得到的数据称为clean data，用于后续分析。</p><h5 id="6-2-reads比对"><a href="#6-2-reads比对" class="headerlink" title="6.2 reads比对"></a><strong>6.2 reads比对</strong></h5><p>​        应用于转录组数据的比对软件， 常用的有bowtie、bowtie2、STAR、HISAT&#x2F;HISAT2等，BWA软件的比对算法被认为对于分割比对不敏感，因而不适合用于RNA 序列与含有内含子序列的基因组序列之间的比对。</p><h5 id="6-3-转录本组装"><a href="#6-3-转录本组装" class="headerlink" title="6.3 转录本组装"></a><strong>6.3 转录本组装</strong></h5><p>​        转录本组装就是将测序数据组装成转录本。对于有参考基因组的物种，根据转录组比对后的结果，明确外显子之间的连接方式，从而构建出转录本的结构。常用工具包括Cufflinks 和Scripture。</p><p>​        对于无参考基因组序列的转录组数据，为了获得完整的转录本序列，需要对RNA 测序得到的短reads进行从头组装。常用工具包括Trinity、TransAbySS和Velvet等。以Trinity 组装小鼠的转录组数据时，为了保证组装效果，至少需要30× 以上覆盖度的测序reads。</p><h5 id="6-4-转录本预测"><a href="#6-4-转录本预测" class="headerlink" title="6.4 转录本预测"></a><strong>6.4 转录本预测</strong></h5><p>​        大多数基因有多种剪接形式，且有可能产生多种转录本，从而编码产生不同的蛋白，这样有可能造成一个基因有多种功能。</p><p>​        对于有参考基因组和转录本参考信息的物种，转录本结构主要是根据测序得到reads 进行比对，reads 覆盖了全部的转录本序列，依靠基因组序列组装出完整的转录本信息。</p><p>​        对于无参考基因组的物种，需要自行组装出基因的转录本序列。得到的基因或转录本序列可以与同物种或近源物种的unigene 和EST 数据库进行比较，以判断得到的基因或转录本序列的可靠性。</p><h5 id="6-5-转录本表达水平分析"><a href="#6-5-转录本表达水平分析" class="headerlink" title="6.5 转录本表达水平分析"></a><strong>6.5 转录本表达水平分析</strong></h5><p>​        FPKM是应用于双段测序的RNA-seq 分析中。Cufflinks、DESeq&#x2F;DESeq2、EDGR等软件可用来进行表达量的确定。常用FDR 等多重检验校正的方法对比较分析的显著性进行校正。</p><h5 id="6-6-变异检测"><a href="#6-6-变异检测" class="headerlink" title="6.6 变异检测"></a><strong>6.6 变异检测</strong></h5><p>检测转录本上全部的SNP 和Indel等突变类型。SAMtools、BCFtools和GATK等软件可用来检测转录组中相关的变异。</p><p>以上具体流程参考<a href="https://wu-tz.github.io/2021/11/11/Analysis-of-transcriptome/">Analysis_of_transcriptome | Wutianzhen (wu-tz.github.io)</a></p><h4 id="7-当前转录组热点"><a href="#7-当前转录组热点" class="headerlink" title="7 当前转录组热点"></a><strong>7 当前转录组热点</strong></h4><p>PacBio 的单分子实时测序技术，具有读长较长的优点，能够进行全长转录组的研究，特别适合用于发现新转录本。随着单细胞分离以及单分子测序技术的发展，单细胞转录组测序技术在异质性细胞的转录组研究中具有广阔的前景。</p><p><strong>本文大篇幅摘自综述农科院崔凯老师的《转录组测序技术的研究和应用进展》。</strong></p><p><strong>崔凯, 吴伟伟, 刁其玉. 转录组测序技术的研究和应用进展. 生物技术通报, 2019, 35(7): 1-9</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 转录组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test_pipeline-of-phylogeny</title>
      <link href="/2021/12/26/pipeline-of-phylogeny/"/>
      <url>/2021/12/26/pipeline-of-phylogeny/</url>
      
        <content type="html"><![CDATA[<p><strong>以2019年发表在MER期刊上的“Transcriptome-based target-enrichment baits for stony corals (Cnidaria: Anthozoa: Scleractinia)”文章中数据为测试数据，跑一遍构建物种分化时间树的探索流程如下：</strong></p><span id="more"></span><h4 id="1、数据获取"><a href="#1、数据获取" class="headerlink" title="1、数据获取"></a>1、数据获取</h4><p>在文献中获取452个直系同源基因序列文件，其中每个文件包括不同数量的物种，未进行多序列比对；分析所需软件和脚本：<strong>Mafft、Trimal、catfasta2phyml.pl、fasta2relaxedPhylip.pl、PartitionFinder、Iqtree、Raxml、astral.5.7.8.jar、Mcmctree</strong>等，多数可用<strong>conda</strong>安装，最好单独创建<strong>python2</strong>和<strong>python3</strong>环境用于以下软件的使用。</p><h4 id="2、利用mafft软件进行多序列比对；"><a href="#2、利用mafft软件进行多序列比对；" class="headerlink" title="2、利用mafft软件进行多序列比对；"></a>2、利用mafft软件进行多序列比对；</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ls&gt;</span><span class="bash">temp.txt;sed -i <span class="string">&#x27;s/temp.txt//g&#x27;</span> temp.txt;<span class="keyword">for</span> i <span class="keyword">in</span> `cat temp.txt`;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;mafft --maxiterate 1000 --localpair <span class="variable">$i</span> &gt; mafft-<span class="variable">$i</span>&quot;</span> &gt;&gt; multiple_mafft.sh;<span class="keyword">done</span>;rm temp.txt <span class="comment">#比对DNA</span></span></span><br><span class="line"></span><br><span class="line">ParaFly -c multiple.sh -CPU 50  #运行mafft比对</span><br></pre></td></tr></table></figure><h4 id="3、利用trimal剪切；"><a href="#3、利用trimal剪切；" class="headerlink" title="3、利用trimal剪切；"></a>3、利用trimal剪切；</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls mafft-OG00* &gt;temp.txt;sed -i &#x27;s/temp.txt//g&#x27; temp.txt;for i in `cat temp.txt`;do trimal -in $i -out out-$i -automated1;done  #剪切，去除非保守区域</span><br></pre></td></tr></table></figure><h4 id="4、过滤；"><a href="#4、过滤；" class="headerlink" title="4、过滤；"></a>4、过滤；</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ls&gt;</span><span class="bash">temp;<span class="keyword">for</span> i <span class="keyword">in</span> `cat temp`;<span class="keyword">do</span> number=`grep -c <span class="string">&#x27;&gt;&#x27;</span> <span class="variable">$i</span>`;<span class="keyword">if</span> [ <span class="variable">$number</span> -lt 6 ]; <span class="keyword">then</span> mv <span class="variable">$i</span> ./remove_file; <span class="keyword">fi</span>;<span class="keyword">done</span>   <span class="comment">#将物种少于6个的文件移到remove_file文件中</span></span></span><br></pre></td></tr></table></figure><h4 id="5、利用串联法建树；"><a href="#5、利用串联法建树；" class="headerlink" title="5、利用串联法建树；"></a>5、利用串联法建树；</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">perl ../../../scripts/catfasta2phyml.pl -c -f *.fasta &gt; super_sequences.fasta     #利用perl脚本将基因进行串联</span><br><span class="line"></span><br><span class="line">perl ../../../scripts/fasta2relaxedPhylip.pl -f super_sequences.fasta -o super_sequences.phylip #利用perl脚本将fasta格式转换为phylip格式</span><br><span class="line"></span><br><span class="line">python PartitionFinder.py task20211220/ #利用PartitionFinder计算分区方案，cfg文件参数为branchlengths=linked;models=GTR,GTR+G,GTR+I+G;model_selection=aicc;search=greedy。此软件所依赖包是python2环境下的，因此要在python2环境下运行此步骤</span><br><span class="line"></span><br><span class="line">iqtree -s super_sequences.fasta -redo -pre outtree -p best_scheme_foriqtree.txt -b 1000 -nt AUTO #利用iqtree构树,-p best_scheme_foriqtree.txt指定上述方法中的最佳分区方案，但是在运行时发现14个物种的gap过多，这些数据导致未能通过卡方检验，运行失败，猜测是数据质量问题，于是使用不分区方案直接对串联序列进行构树</span><br><span class="line"></span><br><span class="line">iqtree -s super_sequences.fasta -redo -pre outtree -m MFP -b 1000 -nt AUTO #利用-m MFP参数自动检测最佳替换模型</span><br></pre></td></tr></table></figure><h4 id="6、溯祖法建树"><a href="#6、溯祖法建树" class="headerlink" title="6、溯祖法建树"></a>6、溯祖法建树</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ls out-mafft*&gt;temp;for i in `cat temp`;do echo &quot;modeltest-ng -i ../$i -d nt&quot; &gt;&gt;multiple_modeltest.sh;done;rm temp  #为每个基因检测最佳碱基替换模型</span><br><span class="line"></span><br><span class="line">ls *.out&gt;temp;for i in `cat temp`;do grep &#x27;raxml-ng --msa&#x27; $i |tail -n 1 &gt;&gt; multiple_raxml.sh;done</span><br><span class="line">sed -i -e &#x27;s/raxml-ng/raxml-ng --all/g&#x27; -e &#x27;s/&gt;//&#x27; -e &#x27;s/$/ --bs-trees 1000/g&#x27; multiple_raxml.sh #提取每个基因的最佳替换模型，并整理为批量运行raxml-ng软件的sh文件，其中--bs-trees参数为1000</span><br><span class="line"></span><br><span class="line">sh multiple_raxml.sh #利用raxml-ng建树</span><br><span class="line"></span><br><span class="line">for i in *.bestTree;do cat $i &gt;&gt;in.tree;done  #将raxml-ng建树结果整理为astral输入格式</span><br><span class="line"></span><br><span class="line">java -jar ~/softwares/Astral/astral.5.7.8.jar -i in.tree -o out.tre 2&gt;out.log #将多个基因树利用astral合并为一棵树。注：此处得到的tree只包含了内部节点的枝长，而不能得到末端枝枝长，某些美化树的软件不能显示（Figtree可以），因此我们也可以通过添加虚拟末端枝长以利用某些软件进行可视化（添加末端枝长的脚本链接为https://github.com/smirarab/global/blob/master/src/mirphyl/utils/add-bl.py）</span><br></pre></td></tr></table></figure><hr><p><strong>方案优化点：</strong><br><strong>①最初使用DNA直接比对后剪切会导致单个基因变不完整（非3整倍数），在检测分区时不能具体到每个密码子中的3个位置（第三位碱基往往比前两位碱基具有更高的突变率），因此，在比对时应采取利用氨基酸比对，再回译为DNA，从而保证基因是3的整倍数，进而得到更为精细的分区方案。</strong><br><strong>②未进行评估序列异质性、饱和程度步骤。</strong></p><hr><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>batch sequences alignment using MAFFT</title>
      <link href="/2021/12/17/paper-data/"/>
      <url>/2021/12/17/paper-data/</url>
      
        <content type="html"><![CDATA[<h3 id="利用Mafft软件分别对蛋白和DNA进行批量比对"><a href="#利用Mafft软件分别对蛋白和DNA进行批量比对" class="headerlink" title="利用Mafft软件分别对蛋白和DNA进行批量比对"></a>利用Mafft软件分别对蛋白和DNA进行批量比对</h3><span id="more"></span><p><strong>首先利用conda安装相关软件和脚本文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda install mafft </span><br><span class="line">conda install Gblocks</span><br><span class="line">conda install trimal</span><br><span class="line">conda install pal2nal.pl</span><br></pre></td></tr></table></figure><h3 id="1、将DNA翻译成氨基酸进行多序列比对，再剪切，最后回译为DNA。"><a href="#1、将DNA翻译成氨基酸进行多序列比对，再剪切，最后回译为DNA。" class="headerlink" title="1、将DNA翻译成氨基酸进行多序列比对，再剪切，最后回译为DNA。"></a>1、将DNA翻译成氨基酸进行多序列比对，再剪切，最后回译为DNA。</h3><p><strong>将序列文件置于当前文件下 .&#x2F;</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ls&gt;</span><span class="bash">temp.txt;sed -i <span class="string">&#x27;s/temp.txt//g&#x27;</span> temp.txt;<span class="keyword">for</span> i <span class="keyword">in</span> `cat temp.txt`;<span class="keyword">do</span> faTrans <span class="variable">$i</span> aa-<span class="variable">$i</span>;<span class="keyword">done</span>;rm temp.txt;mkdir pepfile;mv aa-* pepfile  <span class="comment">#将DNA翻译成蛋白并移入pepfile文件夹；</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ls&gt;</span><span class="bash">temp.txt;sed -i <span class="string">&#x27;s/temp.txt//g&#x27;</span> temp.txt;<span class="keyword">for</span> i <span class="keyword">in</span> `cat temp.txt`;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;mafft --maxiterate 1000 --localpair <span class="variable">$i</span> &gt; mafft-<span class="variable">$i</span>&quot;</span> &gt;&gt; multiple.sh;<span class="keyword">done</span>;rm temp.txt   <span class="comment">#创建mafft批量运行sh文件；</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ParaFly -c multiple.sh -CPU 50  #运行mafft；</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls mafft*&gt;temp.txt;for i in `cat temp.txt`;do Gblocks $i -b5=h;done #剪切氨基酸;</span><br></pre></td></tr></table></figure><p><strong><!--此处利用gblocks是防止利用trimal时，会自动清除全长gap的物种，后续回译报错物种不匹配。--></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename .fasta-gb .fasta *-gb   #修改后缀;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls *.fasta&gt;temp.txt;for i in `cat temp.txt`;do pal2nal.pl ./pepfile/mafft-aa-$i $i -output fasta &gt; out-$i;done#氨基酸回译为dna</span><br></pre></td></tr></table></figure><p><strong>此时遇到的问题是：报错inconsistency between the following pep and nuc seqs，导致回译之后的序列文件部分为空。并且此时得到的结果可能包括全长为gap的序列，这会影响后续系统发育结构的构建，应将序列中的此类物种去掉。</strong></p><!--**此部分属于试错阶段，我们可以按需选取步骤**--><p><strong>两款剪切软件的区别：</strong></p><p><strong>Gblocks：剪切后不会丢弃数据缺失物种；</strong></p><p><strong>trimal：剪切后会将数据缺失物种丢弃。</strong></p><h3 id="2、将DNA直接比对后直接剪切，用于后续分析。"><a href="#2、将DNA直接比对后直接剪切，用于后续分析。" class="headerlink" title="2、将DNA直接比对后直接剪切，用于后续分析。"></a>2、将DNA直接比对后直接剪切，用于后续分析。</h3><p><strong><!--注：Gblocks之后序列被剪切为不完整的CDS，造成序列可能非3整倍数，不过这对构建系统发生关系没有影响。所以可以避免在标题1中的问题。--></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ls&gt;</span><span class="bash">temp.txt;sed -i <span class="string">&#x27;s/temp.txt//g&#x27;</span> temp.txt;<span class="keyword">for</span> i <span class="keyword">in</span> `cat temp.txt`;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;mafft --maxiterate 1000 --localpair <span class="variable">$i</span> &gt; mafft-<span class="variable">$i</span>&quot;</span> &gt;&gt; multiple_mafft.sh;<span class="keyword">done</span>;rm temp.txt <span class="comment">#比对DNA</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ParaFly -c multiple.sh -CPU 50  #运行mafft；</span><br></pre></td></tr></table></figure><p><strong>接下来直接用Trimal软件剪切序列，去除非保守区域。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls mafft-OG00* &gt;temp.txt;sed -i &#x27;s/temp.txt//g&#x27; temp.txt;for i in `cat temp.txt`;do trimal -in $i -out out-$i -automated1;done  #剪切</span><br></pre></td></tr></table></figure><p><strong><!--此时得到的数据直接用于后续系统发育分析（非3整倍数，当用与其他分析时需谨慎，比如选择压力分析）。--></strong></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a><strong>参考：</strong></h3><p><strong>Quek, R. Z., Jain, S. S., Neo, M. L., Rouse, G. W., &amp; Huang, D. (2020). Transcriptome‐based target‐enrichment baits for stony corals (Cnidaria: Anthozoa: Scleractinia). <em>Molecular ecology resources</em>, <em>20</em>(3), 807-818.</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将fasta序列转化为键值对后进行序列处理</title>
      <link href="/2021/12/08/split-gene/"/>
      <url>/2021/12/08/split-gene/</url>
      
        <content type="html"><![CDATA[<p>功能：将fasta格式的序列文件按照特定位置切分为前后两部分，并存为两个新的fasta文件。</p><span id="more"></span><p>其中，f是待切分的序列文件；f1、f2分别是切分后产生的文件；m为切割分界线位置；n为比对后序列全长。</p><p>关键知识为将fasta格式序列中的物种名定义为健、序列定义为值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;PRM2-61.fas&quot;</span>)</span><br><span class="line">f1=<span class="built_in">open</span>(<span class="string">&quot;61-qian.fas&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">f2=<span class="built_in">open</span>(<span class="string">&quot;61-hou.fas&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">m=<span class="number">144</span></span><br><span class="line">n=<span class="number">306</span></span><br><span class="line">seq = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="keyword">if</span> line.startswith(<span class="string">&#x27;&gt;&#x27;</span>):</span><br><span class="line">        name=line.replace(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).split()[<span class="number">0</span>]</span><br><span class="line">        seq[name]=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        seq[name]+=line.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#print(seq.keys())</span></span><br><span class="line">species=seq.keys()</span><br><span class="line"><span class="comment">#print(species)</span></span><br><span class="line"><span class="keyword">for</span> ecsh_spe <span class="keyword">in</span> species:</span><br><span class="line">    line1=seq[ecsh_spe][<span class="number">0</span>:m]</span><br><span class="line">    line2=seq[ecsh_spe][m:n]</span><br><span class="line">    <span class="comment">#print(line1)</span></span><br><span class="line">    f1.write(<span class="string">&#x27;&gt;&#x27;</span>+ecsh_spe+<span class="string">&quot;\n&quot;</span>+line1+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="comment">#print(line2)</span></span><br><span class="line">    f2.write(<span class="string">&#x27;&gt;&#x27;</span>+ecsh_spe+<span class="string">&quot;\n&quot;</span>+line2+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>website links</title>
      <link href="/2021/11/22/Database-link/"/>
      <url>/2021/11/22/Database-link/</url>
      
        <content type="html"><![CDATA[<p>26、</p><p>25、14种珊瑚转录组数据库（内含其他4个珊瑚转录组来源数据库）<a href="https://www.comp.hkbu.edu.hk/~db/CoralTBase/index.php">ScleractiniaTBase (hkbu.edu.hk)</a></p><p>1、美国国家生物信息中心<a href="https://www.ncbi.nlm.nih.gov/">National Center for Biotechnology Information (nih.gov)</a></p><p>2、清华大学生物信息教学<a href="https://lulab2.gitbook.io/teaching/">Bioinformatics Tutorial - Basic - Bioinformatics Tutorial - Basic (gitbook.io)</a></p><p>3、 濒危物种红色名录<a href="https://www.iucnredlist.org/">IUCN Red List of Threatened Species</a></p><p>4、生物绘图在线网站<a href="https://biorender.com/">BioRender</a></p><span id="more"></span><p>5、系统发育树在线编辑<a href="https://itol.embl.de/">iTOL: Interactive Tree Of Life (embl.de)</a></p><p>6、蛋白结构域在线预测，也可下载软件进行本地批量运行<a href="http://pfam.xfam.org/">Pfam: Home page (xfam.org)</a></p><p>7、提供的服务包括搜索、最新新闻、地图和百科、电子信箱、电子商务、互联网广告及其他服务。Yandex在俄罗斯本地的市场份额已远超俄罗斯google<a href="https://yandex.com/">Yandex</a></p><p>8、ADW是动物自然历史百科全书，由学生、摄影师和许多其他人的贡献建立；可利用上面的生态学数据用于分析，如动物的体重、寿命等数据。<a href="https://animaldiversity.org/">ADW: Home (animaldiversity.org)</a></p><p>9、R-Bioconductor的官网，包括安装、学习、使用和更新发展。<a href="http://www.bioconductor.org/">Bioconductor - Home</a></p><p>10、各种计算机语言的教学站点<a href="https://www.runoob.com/">菜鸟教程 - 学的不仅是技术，更是梦想！ (runoob.com)</a></p><p>11、哈佛生信大牛刘小乐的生信教学视频<a href="https://liulab-dfci.github.io/bioinfo-combio/">Introduction to Bioinformatics and Computational Biology (liulab-dfci.github.io)</a></p><p>12、物种进化树及其分化时间网站<a href="http://www.timetree.org/">TimeTree :: The Timescale of Life</a></p><p>13、杨子恒PAML软件的中文说明书<a href="https://max.book118.com/html/2017/0323/96483278.shtm">PAML中文的说明.doc (book118.com)</a></p><p>14、清华大学 TUNA 协会，包括开源镜像站<a href="https://tuna.moe/">清华大学 TUNA 协会</a></p><p>15、操作分类单元（OTUs）聚类<a href="https://www.cnblogs.com/djx571/p/9098831.html">OTU（operational taxonomic units），即操作分类单元 - 发那个太丢人 - 博客园 (cnblogs.com)</a></p><p>16、绘制基因结构图，只需给出位置信息即可<a href="http://gsds.gao-lab.org/">Gene Structure Display Server 2.0 (gao-lab.org)</a></p><p>17、利用phytools包来重建祖先序列的脚本示例网页<a href="http://www.phytools.org/eqg2015/asr.html">Ancestral state reconstruction &amp; visualizing ancestral states on a phylogeny (phytools.org)</a></p><p>18、查找基因功能的快捷网站，输入基因即可列出相关功能和参考文献<a href="https://omim.org/">OMIM - Online Mendelian Inheritance in Man</a></p><p>19、西工大Kun Wang的github账号<a href="https://github.com/wk8910">wk8910 (Kun Wang) · GitHub</a></p><p>20、可搜索4000+实验方法，得到具体流程<a href="https://bio-protocol.org/cn/default.aspx">Bio-protocol - Improve Research Reproducibility1</a></p><p>21、历史自然博物馆-伦敦<a href="https://www.nhm.ac.uk/">Home | Natural History Museum (nhm.ac.uk)</a></p><p>22、国家基因库生命大数据平台<a href="https://db.cngb.org/">CNGBdb-国家基因库生命大数据平台</a></p><p>23、用于基因表达分析的分子信息学资源，转录因子预测等<a href="http://www.ifti.org/">Molecular Informatics Resource for the Analysis of Gene Expression (ifti.org)</a></p><p>24、北京大学生物信息学中心<a href="https://www.cbi.pku.edu.cn/">Center for Bioinformatics, Peking University (beta) (pku.edu.cn)</a></p><hr><p><strong>实时更新</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Links </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10个便捷的Linux小工具</title>
      <link href="/2021/11/22/20211122/"/>
      <url>/2021/11/22/20211122/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><strong>Linux</strong></h2><h3 id="（1）axel"><a href="#（1）axel" class="headerlink" title="（1）axel"></a>（1）axel</h3><p>多线程下载工具，下载文件时可以替代curl、wget</p><p><code>axel -n 20 http://centos.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1511.iso</code></p><img src="/2021/11/22/20211122/20211122010714.jpg" class width="20211122010714"><h3 id="（2）shellcheck"><a href="#（2）shellcheck" class="headerlink" title="（2）shellcheck"></a>（2）shellcheck</h3><p>shell脚本静态检查工具，能够识别语法错误以及不规范的写法.</p><h3 id="（3）fzf"><a href="#（3）fzf" class="headerlink" title="（3）fzf"></a>（3）fzf</h3><p>命令行下模糊搜索工具，能够交互式智能搜索并选取文件或者内容，配合终端ctrl-r历史命令搜索简直完美（ctrl + r查找以前输入的命令，比上下键和history好用）。</p><h3 id="（4）htop"><a href="#（4）htop" class="headerlink" title="（4）htop"></a>（4）htop</h3><p><strong>htop:</strong> 提供更美观、更方便的进程监控工具，替代top命令。</p><h3 id="（5）ag"><a href="#（5）ag" class="headerlink" title="（5）ag"></a>（5）ag</h3><p>递归搜索文件内容，类似grep 和 find，但是执行效率比后两者高</p><p>参数与grep存在相似之处，如-i -A -B -C，</p><p>ag –ignore-dir <Dir name>：忽略某些文件目录进行搜索，</Dir></p><p>ag -w PATTERN： 全匹配搜索，只搜索与所搜内容完全匹配的文本，</p><p>ag –java PATTERN： 在java文件中搜索含PATTERN的文本，</p><p>ag –xml PATTERN：在XML文件中搜索含PATTERN的文本。</p><h3 id="（6）multitail"><a href="#（6）multitail" class="headerlink" title="（6）multitail"></a>（6）multitail</h3><p>多重  tail。通常你不止一个日志文件要监控，怎么办？终端软件里开多个 tab 太占地方，可以试试这个工具。</p><h3 id="（7）script-scriptreplay"><a href="#（7）script-scriptreplay" class="headerlink" title="（7）script&#x2F;scriptreplay"></a>（7）script&#x2F;scriptreplay</h3><p>终端会话录制。</p><h3 id="（8）tmux"><a href="#（8）tmux" class="headerlink" title="（8）tmux"></a>（8）tmux</h3><p>终端复用工具，替代screen、nohup。</p><h3 id="（9）tig"><a href="#（9）tig" class="headerlink" title="（9）tig"></a>（9）tig</h3><p>字符模式下交互查看git项目，可以替代git命令。</p><h3 id="（10）mycli"><a href="#（10）mycli" class="headerlink" title="（10）mycli"></a>（10）mycli</h3><p>mysql客户端，支持语法高亮和命令补全，效果类似ipython，可以替代mysql命令。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://medium.com/starbugs/do-you-understand-htop-ffb72b3d5629">你一定用過 htop，但你有看懂每個欄位嗎？. 身為一個工程師，不管你寫的是前端、後端、全端還是什麼端，一定多少用過… | by Larry Lu | Starbugs Weekly 星巴哥技術專欄 | Medium</a></p><p><a href="https://blog.csdn.net/shisanmei911/article/details/89360353">https://blog.csdn.net/shisanmei911/article/details/89360353</a></p><p><a href="https://mp.weixin.qq.com/s/MhgE1dQzspWJZ6Ce5cK8WA">https://mp.weixin.qq.com/s/MhgE1dQzspWJZ6Ce5cK8WA</a></p><p><a href="https://blog.csdn.net/iamlaosong/article/details/52538599">(11条消息) Linux用ctrl + r 查找以前输入的命令_驽马十驾 才定不舍-CSDN博客</a></p><p><a href="https://baijiahao.baidu.com/s?id=1652587589132970199&wfr=spider&for=pc">Fzf一个由Golang开发的完美通用的Shell命令行模糊查询工具 (baidu.com)</a></p><p>……</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> shell笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海洋鱼类的悲哀</title>
      <link href="/2021/11/21/%E4%BA%BA%E7%B1%BB%E7%9A%84%E5%91%BC%E5%A3%B0%E2%80%94%E2%80%94%E4%BF%9D%E6%8A%A4/"/>
      <url>/2021/11/21/%E4%BA%BA%E7%B1%BB%E7%9A%84%E5%91%BC%E5%A3%B0%E2%80%94%E2%80%94%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<p>那么利用率“不足100%”到底指什么呢？难道海洋中鱼类的存在仅仅是为了被人类利用吗？(Earle S A, 1995;Weber P, 1993)</p><img src="/2021/11/21/%E4%BA%BA%E7%B1%BB%E7%9A%84%E5%91%BC%E5%A3%B0%E2%80%94%E2%80%94%E4%BF%9D%E6%8A%A4/fish.jpg" class title="fish"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 保护生物多样性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Knowledge of Sequencing</title>
      <link href="/2021/11/14/Sequencing/"/>
      <url>/2021/11/14/Sequencing/</url>
      
        <content type="html"><![CDATA[<p>浅谈测序</p><span id="more"></span><p>基因组组装是指使用测序方法将待测物种的基因组生成序列片段（即read），并根据reads 之间的重叠区域对片段进行拼接，先拼接成较长的连续序列（contig），再将contigs 拼接成更长的允许包含空白序列（gap）的scaffolds，通过消除scaffolds 的错误和gaps，将这些scaffolds 定位到染色体上，从而得到高质量的全基因组序列。</p><img src="/2021/11/14/Sequencing/20190511201315924.png" class width="20190511201315924"><p>自基因组测序以来的组装里程碑</p><img src="/2021/11/14/Sequencing/lcb.png" class title="lcb"><p>第三代测序技术又称为单分子测序技术，主要是指pacific biosciences公司推出的single molecular real time(SMRT)测序技术（通过荧光辨别）和Oxford nanopore technologies公司推出的纳米孔测序技术（通过电流辨别）。测序时，DNA不需要PCR扩增过程，即可实现对每一条DNA分子的单独测序。</p><p>Pacbio测序平台下SMRT测序技术的两种模式：</p><p>Standard sequencing for continuous long reads(CLR)超长度长测序：存在随即错误；</p><p>Circular consensus sequencing（CCS）环形比对测序：可自动纠错，又被称为HIFI。</p><img src="/2021/11/14/Sequencing/compare.jpg" class title="compare"><p>Hi-C（High-throughput chromosome conformation capture），高通量染色体构象捕获。</p><img src="/2021/11/14/Sequencing/com.jpg" class title="com"><p>利用甲醛对样本进行交联，质检合格后使用限制性内切酶（如MboI等）进行酶切，酶切片段经生物素标记、平末端连接、DNA纯化提取，超声打断后钓取含有生物素的片段，进行建库测序。随后，对原始下机数据进行质控，并将质控截取后的Clean reads与参考基因组比对，获得用于互作分析的Valid reads。</p><img src="/2021/11/14/Sequencing/hicshiyan.jpg" class title="hicshiyan"><p>常用的Hi-C数据处理软件是HiC-Pro，该软件采用两步比对策略，有效提高了数据的利用率的同时，还提供了一系列的质控标准，对文库质量进行评估。</p><p>目前，用于Hi-C辅助基因组组装的软件有LACHESIS、SALSA2、3D-DNA、ALLHiC等，这些软件在基因组组装方面各有优劣（各种方法具体算法参考<a href="http://www.bioon.com.cn/news/showarticle.asp?newsid=87435">Hi-C辅助组装知多少，硬核知识点来了~ - 商家动态 - 资讯 - 生物在线 (bioon.com.cn)</a>）</p><p>参考：</p><p>王通.纳米孔测序数据分析手册.</p><p>Giani, A. M., Gallo, G. R., Gianfranceschi, L., &amp; Formenti, G. (2020). Long walk to genomics: History and current approaches to genome sequencing and assembly. Computational and structural biotechnology journal, 18, 9-19.</p><p><a href="https://blog.csdn.net/u010608296/article/details/90110770">https://blog.csdn.net/u010608296/article/details/90110770</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 前沿了解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Analysis_of_transcriptome</title>
      <link href="/2021/11/11/Analysis-of-transcriptome/"/>
      <url>/2021/11/11/Analysis-of-transcriptome/</url>
      
        <content type="html"><![CDATA[<p><strong>以下机数据为基础，跑通的转录组分析流程</strong></p><span id="more"></span><h3 id="一、部分软件安装"><a href="#一、部分软件安装" class="headerlink" title="一、部分软件安装"></a>一、部分软件安装</h3><p>利用conda安装trimmomatic、fastqc、hisat2、samtools等软件</p><p>HTSeq的安装需要在python2.7环境下(方法如下)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://pypi.python.org/packages/source/H/HTSeq/HTSeq-0.6.1p1.tar.gz</span><br><span class="line">tar -zxvf HTSeq-0.6.1p1.tar.gz</span><br><span class="line">cd HTSeq-0.6.1p1/</span><br><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br><span class="line">vi ~/.bashrc</span><br><span class="line">export PATH=&quot;$PATH:/(省略)/software/HTSeq-0.6.1p1/build/scripts-2.7/htseq-count&quot;</span><br><span class="line">source ~/.bashrc </span><br></pre></td></tr></table></figure><p>注：安装的htseq-count在HTSeq-0.6.1p1&#x2F;build&#x2F;scripts-2.7&#x2F;目录下。</p><p>注：安装的htseq-count在HTSeq-0.6.1p1&#x2F;build&#x2F;scripts-2.7&#x2F;目录下。</p><p>或安装featureCounts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://nchc.dl.sourceforge.net/project/subread/subread-1.6.3/subread-1.6.3-source.tar.gz &amp;</span><br><span class="line">tar -zxvf subread-1.6.3-source.tar.gz</span><br></pre></td></tr></table></figure><p>添加环境变量后即可使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">featureCounts -T 20 -t exon -g gene_id -a Danio_rerio.GRCz11.104.gtf -o count.txt align.bam</span><br></pre></td></tr></table></figure><p>添加环境变量后即可使用。<br>featureCounts -T 20 -t exon -g gene_id -a Danio_rerio.GRCz11.104.gtf -o count.txt align.bam</p><p>Rstudio安装DESeq2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages(&quot;BiocManager&quot;)</span><br><span class="line">BiocManager::install(&quot;DESeq2&quot;)</span><br><span class="line">library(DESeq2)</span><br></pre></td></tr></table></figure><h3 id="二、数据处理流程"><a href="#二、数据处理流程" class="headerlink" title="二、数据处理流程"></a>二、数据处理流程</h3><p>过滤街接头序列，质量较差等不成对序列[1]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trimmomatic PE -threads 20 clocka-clocka-mut_combined_R1.fastq.gz clocka-clocka-mut_combined_R2.fastq.gz -baseout clocka-clocka-mut_combined ILLUMINACLIP:TruSeq3-PE.fa:2:30:10:8:true SLIDINGWINDOW:5:20 LEADING:3 TRAILING:3 MINLEN:36</span><br></pre></td></tr></table></figure><p>质控[2]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastqc clocka-clocka-mut_combined_1P clocka-clocka-mut_combined_2P -o ./ -t 20   </span><br></pre></td></tr></table></figure><p><u>过滤后的质控结果发现Per base sequence content和Sequence Duplication Levels[3]两项是红叉，通过查阅资料，两者对后续分析无负面影响。</u></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">extract_exons.py Danio_rerio.GRCz11.104.gtf &gt; genome.exon</span><br><span class="line">extract_splice_sites.py Danio_rerio.GRCz11.104.gtf &gt; genome.ss</span><br><span class="line">hisat2-build -p 20 GCF_000002035.6_GRCz11_genomic.fna --ss genome.ss --exon genome.exon genome_tran</span><br><span class="line"></span><br><span class="line">hisat2 -p 30 --dta -x genome_tran -1 clocka-clocka-mut_combined_1P -2 clocka-clocka-mut_combined_2P -S align.sam  #比对</span><br><span class="line">Warning: Unsupported file format</span><br><span class="line"></span><br><span class="line">samtools view -S align.sam -b &gt; align.bam   #转化格式sam-bam参考https://blog.csdn.net/weixin_39790504/article/details/111376943</span><br><span class="line">samtools sort -l 4 -o align_sort.bam align.bam #排序</span><br><span class="line">samtools index align_sort.bam align_sort.bam.bai  #建立索引</span><br><span class="line">htseq-count -f bam -r name -i gene_id -s yes -t gene -m intersection-nonempty align_sort.bam Danio_rerio.GRCz11.104.gtf &gt; count.txt  #计数</span><br></pre></td></tr></table></figure><hr><p>未完，待续</p><hr><h3 id="三、其他参考文章"><a href="#三、其他参考文章" class="headerlink" title="三、其他参考文章"></a>三、其他参考文章</h3><p>[1]<a href="https://blog.csdn.net/sinat_32872729/article/details/93487342">https://blog.csdn.net/sinat_32872729&#x2F;article&#x2F;details&#x2F;93487342</a><br>[2]<a href="https://www.jianshu.com/p/fe6af418a8bc">https://www.jianshu.com/p/fe6af418a8bc</a><br>[3]<a href="https://www.biostars.org/p/307361/#307372">https://www.biostars.org/p/307361/#307372</a></p><p>转录组详细流程参考于Dawn_WangTP用户 ：<a href="https://www.jianshu.com/u/a64003068454">https://www.jianshu.com/u/a64003068454</a><br>对于转录组所涉及的文件格式的理解，参考<a href="https://www.jianshu.com/p/03bc06c1e84a">https://www.jianshu.com/p/03bc06c1e84a</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用python快速得到两条同源序列的差异位点</title>
      <link href="/2021/09/04/%E5%88%A9%E7%94%A8python%E5%BF%AB%E9%80%9F%E5%BE%97%E5%88%B0%E4%B8%A4%E6%9D%A1%E5%90%8C%E6%BA%90%E5%BA%8F%E5%88%97%E7%9A%84%E5%B7%AE%E5%BC%82%E4%BD%8D%E7%82%B9/"/>
      <url>/2021/09/04/%E5%88%A9%E7%94%A8python%E5%BF%AB%E9%80%9F%E5%BE%97%E5%88%B0%E4%B8%A4%E6%9D%A1%E5%90%8C%E6%BA%90%E5%BA%8F%E5%88%97%E7%9A%84%E5%B7%AE%E5%BC%82%E4%BD%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>准备（windows为例）：安装python、pycharm</p><span id="more"></span></blockquote><blockquote><p>输入文件: fasta格式，包括两条序列；</p><p>输出文件包括位置及两个差异位点</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2021/5/28 23:22</span></span><br><span class="line"><span class="comment"># @Author : wutz</span></span><br><span class="line"><span class="comment"># @File : call_divergent_sites.py</span></span><br><span class="line"><span class="comment"># @Software : PyCharm</span></span><br><span class="line">fasfile = <span class="built_in">open</span>(<span class="string">&quot;input.fas&quot;</span>)</span><br><span class="line">outfile = <span class="built_in">open</span>(<span class="string">&quot;divergent-sites.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">lines = fasfile.readlines()</span><br><span class="line">a = lines[<span class="number">1</span>].strip()</span><br><span class="line">b = lines[<span class="number">3</span>].strip()</span><br><span class="line"><span class="built_in">len</span> = <span class="built_in">len</span>(a)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>:</span><br><span class="line">    <span class="keyword">if</span> a[i] != b[i] <span class="keyword">and</span> a[i] != <span class="string">&quot;-&quot;</span> <span class="keyword">and</span> b[i] != <span class="string">&quot;-&quot;</span> <span class="keyword">and</span> a[i] != <span class="string">&quot;?&quot;</span> <span class="keyword">and</span> b[i] != <span class="string">&quot;?&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a[i],i + <span class="number">1</span>,b[i], file=outfile)</span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用query序列在本地匹配测序原始reads</title>
      <link href="/2021/09/04/%E5%88%A9%E7%94%A8query%E6%9C%AC%E5%9C%B0%E5%8C%B9%E9%85%8D%E6%B5%8B%E5%BA%8F%E5%8E%9F%E5%A7%8Breads/"/>
      <url>/2021/09/04/%E5%88%A9%E7%94%A8query%E6%9C%AC%E5%9C%B0%E5%8C%B9%E9%85%8D%E6%B5%8B%E5%BA%8F%E5%8E%9F%E5%A7%8Breads/</url>
      
        <content type="html"><![CDATA[<p><strong>利用转录组或重测序数据原始reads匹配到目的序列，以验证序列的准确性</strong>。</p><blockquote><p><strong>以RNA-Seq of Hippopotamus amphibius: adult male skin——<a href="https://www.ncbi.nlm.nih.gov/sra/?term=SRR8270566">SRR8270566</a>为例</strong></p></blockquote><span id="more"></span><blockquote><p>下载相关软件及工具：bwa、samtools、fastq</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">prefetch SRR8270566  <span class="comment">#下载SRA数据库的reads数据，另：wget -c https://sra-downloadb.be-md.ncbi.nlm.nih.gov/sos1/sra-pub-run-2/SRR8270566/SRR8270566.1 也可</span></span><br><span class="line"></span><br><span class="line">fastq -<span class="operator">-split</span><span class="literal">-3</span> SRR8270566.<span class="number">1</span>  <span class="comment">#转换为fastq格式</span></span><br><span class="line"></span><br><span class="line">bwa index <span class="literal">-a</span> bwtsw hamp.fas  <span class="comment">#目的序列建立索引</span></span><br><span class="line"></span><br><span class="line">bwa mem <span class="literal">-t</span> <span class="number">20</span> <span class="literal">-M</span> <span class="literal">-R</span> <span class="string">&quot;@RG\tID:hamp\t&quot;</span> hamp.fas SRR8270566.<span class="number">1</span>_1.fastq SRR8270566.<span class="number">1</span>_2.fastq &gt; hamp.sam <span class="comment">#比对，生成sam文件</span></span><br><span class="line"></span><br><span class="line">samtools <span class="built_in">sort</span> -<span class="selector-tag">@</span> <span class="number">30</span> <span class="literal">-m</span> <span class="number">10</span>G <span class="literal">-O</span> bam <span class="literal">-o</span> hamp.bam hamp.sam  <span class="comment">#生成二进制bam文件</span></span><br><span class="line"></span><br><span class="line">samtools index hamp.bam     <span class="comment">#生成bam.bai文件</span></span><br></pre></td></tr></table></figure><blockquote><p>最后利用IGV或Tablet等可视化软件将hamp.fas、hamp.bam、hamp.bam.bai可视化即可看到query片段所匹配的reads</p></blockquote><p><strong>There’s More Than One Way To Do It！仅供参考！</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell三剑客</title>
      <link href="/2021/09/02/shell%E4%B8%89%E5%89%91%E5%AE%A2/"/>
      <url>/2021/09/02/shell%E4%B8%89%E5%89%91%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 align="center">利用命令行快速处理文件</h1><h3 id="1、Shell里的循环与判断结构"><a href="#1、Shell里的循环与判断结构" class="headerlink" title="1、Shell里的循环与判断结构"></a>1、Shell里的循环与判断结构</h3><p>for循环：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in `cat 1.txt`;do command;done</span><br></pre></td></tr></table></figure><p>while循环：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while [表达式]；do command;done</span><br></pre></td></tr></table></figure><p>if结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [条件]；then</span><br><span class="line">command</span><br><span class="line">else</span><br><span class="line">command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="2、shell三剑客"><a href="#2、shell三剑客" class="headerlink" title="2、shell三剑客"></a>2、shell三剑客</h3><p>（sed和awk部分参考了黑马程序员武汉中心在线教程文件<a href="https://www.bilibili.com/video/BV1st411N7WS?from=search&seid=1843626299734778610">2019全新Shell脚本从入门到精通教程_哔哩哔哩_bilibili</a>）</p><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>语法格式：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [<span class="type">options</span>] <span class="string">&quot;patten&quot;</span> filename1 filename2 filename3     <span class="comment">#打印包含patten的行</span></span><br></pre></td></tr></table></figure><p>常用options：</p><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-v</td><td align="center">反向输出</td></tr><tr><td align="center">–color&#x3D;auto</td><td align="center">标记匹配颜色</td></tr><tr><td align="center">-E</td><td align="center">使用正则表达式</td></tr><tr><td align="center">-o</td><td align="center">只输出匹配部分</td></tr><tr><td align="center">-c</td><td align="center">统计包含匹配字符的行数</td></tr><tr><td align="center">-n</td><td align="center">输出匹配内容及其行号</td></tr><tr><td align="center">-b</td><td align="center">打印匹配模式位于行的位置</td></tr><tr><td align="center">-l</td><td align="center">搜索多个文件，并查找匹配文本在拿个文件中</td></tr><tr><td align="center">. -r</td><td align="center">在多级目录中查找</td></tr><tr><td align="center">-i</td><td align="center">忽略大小写</td></tr><tr><td align="center">-e</td><td align="center">匹配两个patten</td></tr><tr><td align="center">-q</td><td align="center">不输出任何内容，成功返回0，失败则返回非0值</td></tr><tr><td align="center">-An</td><td align="center">打印匹配模式之后的n行</td></tr><tr><td align="center">-Bn</td><td align="center">打印匹配模式之前的n行</td></tr><tr><td align="center">-Cn</td><td align="center">打印匹配模式上下游各n行</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eg: </span><br><span class="line">echo gun is not unix | grep -b -o &quot;not&quot;     #输出  7:not</span><br><span class="line">grep -l &quot;patten&quot; file1 file2 file3    #输出文件名</span><br><span class="line">grep &quot;patten&quot; . -r -n   #.代表当当前目录</span><br><span class="line">grep -e &quot;patten1&quot; -e &quot;patten2&quot; filename</span><br><span class="line">grep -q &quot;patten&quot; filename</span><br></pre></td></tr></table></figure><p>另：Linux xargs命令（结合管道使用）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line">cat url-list.txt | xargs wget -c  #文件包含多个URL，使用xargs下载</span><br></pre></td></tr></table></figure><p>xargs命令的详细用法参考<a href="https://www.runoob.com/linux/linux-comm-xargs.html">Linux xargs 命令 | 菜鸟教程 (runoob.com)</a></p><h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><p>语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [options] &#x27;定位+处理动作&#x27; 文件名</span><br></pre></td></tr></table></figure><p>常用options：</p><table><thead><tr><th align="center">选项</th><th align="center">说明</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">-e</td><td align="center">进行多项(多次)编辑</td><td align="center"></td></tr><tr><td align="center">-n</td><td align="center">取消默认输出</td><td align="center">不自动打印模式空间</td></tr><tr><td align="center">-r</td><td align="center">使用<strong>扩展正则表达式</strong></td><td align="center"></td></tr><tr><td align="center">-i</td><td align="center">原地编辑（修改源文件）</td><td align="center"></td></tr><tr><td align="center">-f</td><td align="center">指定sed脚本的文件名</td><td align="center"></td></tr></tbody></table><p>常用处理（在<strong>单引号</strong>里）：</p><table><thead><tr><th align="center">动作</th><th align="center">说明</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">‘p’</td><td align="center">打印</td><td align="center"></td></tr><tr><td align="center">‘i’</td><td align="center">在指定行<strong>之前</strong>插入内容</td><td align="center">类似vim里的大写O</td></tr><tr><td align="center">‘a’</td><td align="center">在指定行<strong>之后</strong>插入内容</td><td align="center">类似vim里的小写o</td></tr><tr><td align="center">‘c’</td><td align="center">替换指定行所有内容</td><td align="center"></td></tr><tr><td align="center">‘d’</td><td align="center">删除指定行</td><td align="center"></td></tr></tbody></table><p>对文件进行<u>增、删、改、查</u>操作</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="literal">-n</span> <span class="string">&#x27;1,5p&#x27;</span>  a.txt<span class="comment">#打印1到5行</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="literal">-n</span> <span class="string">&#x27;$p&#x27;</span> a.txt <span class="comment">#打印最后1行</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;5a99999&#x27;</span> a.txt <span class="comment">#文件第5行下面增加内容</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;/^uucp/ihello&#x27;</span><span class="comment">#以uucp开头行的上一行插入内容</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;1,5chello world&#x27; a.txt #替换文件1到5号内容为hello world</span><br><span class="line">sed &#x27;/^user01/c888888&#x27; a.txt#替换以user01开头的行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;$d&#x27; a.txt#删除文件最后一行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &#x27;1,5s/^/#/p&#x27; a.txt  #注释掉文件的1-5行内容</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &#x27;s/root/ROOT/gp&#x27; 1.txt   #替换1.txt文件中所有的root为ROOT</span><br></pre></td></tr></table></figure><p>sed结合正则使用</p><table><thead><tr><th align="center">正则</th><th align="center">说明</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">&#x2F;key&#x2F;</td><td align="center">查询包含关键字的行</td><td align="center"><code>sed -n &#39;/root/p&#39; 1.txt</code></td></tr><tr><td align="center">&#x2F;key1&#x2F;,&#x2F;key2&#x2F;</td><td align="center">匹配包含两个关键字之间的行</td><td align="center"><code>sed -n &#39;/\^adm/,/^mysql/p&#39; 1.txt</code></td></tr><tr><td align="center">&#x2F;key&#x2F;,x</td><td align="center">从匹配关键字的行开始到&#x3D;&#x3D;文件第x行&#x3D;&#x3D;之间的行（包含关键字所在行）</td><td align="center"><code>sed -n &#39;/^ftp/,7p&#39;</code></td></tr><tr><td align="center">x,&#x2F;key&#x2F;</td><td align="center">从文件的第x行开始到与关键字的匹配行之间的行</td><td align="center"></td></tr><tr><td align="center">x,y!</td><td align="center">不包含x到y行</td><td align="center"></td></tr><tr><td align="center">&#x2F;key&#x2F;!</td><td align="center">不包括关键字的行</td><td align="center"><code>sed -n &#39;/bash$/!p&#39; 1.txt</code></td></tr></tbody></table><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><p>awk是unix下的一个工具，也是一门语言，支持条件判断和循环语句（如for或while），是数据文件的<strong>列处理工具</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [options] &#x27;命令部分&#x27; filename</span><br></pre></td></tr></table></figure><p>常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-F</td><td align="center">定义分隔符，默认为空格</td></tr><tr><td align="center">-v</td><td align="center">定义变量并赋值（awk中调用变量无需加$符号）</td></tr></tbody></table><p>命令部分：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a）正则表达式或地址位置    </span><br><span class="line">  &#x27;/root/&#123;awk语句&#125;&#x27;</span><br><span class="line"> &#x27;NR==1,NR==5&#123;awk语句&#125;&#x27;  #sed中：&#x27;1,5p&#x27;</span><br><span class="line"> &#x27;/^root/,/^ftp/&#123;awk语句&#125;&#x27; #sed中：&#x27;/^root/,/^ftp/p&#x27;</span><br><span class="line">b)</span><br><span class="line">&#123;awk语句1;awk语句2&#125;</span><br><span class="line"> 注：awk命令语句间用分号间隔</span><br><span class="line">c)</span><br><span class="line">BEGIN...END....</span><br><span class="line"> &#x27;BEGIN&#123;awk语句&#125;;&#123;处理中&#125;;END&#123;awk语句&#125;&#x27;</span><br><span class="line"> &#x27;BEGIN&#123;awk语句&#125;;&#123;处理中&#125;&#x27;</span><br><span class="line"> &#x27;&#123;处理中&#125;;END&#123;awk语句&#125;&#x27;</span><br></pre></td></tr></table></figure><p>awk内部相关变量</p><table><thead><tr><th align="center">变量</th><th align="center">变量说明</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">$0</td><td align="center">当前处理行的所有记录</td><td align="center"></td></tr><tr><td align="center">$1,$2,$3…$n</td><td align="center">文件中每行以&#x3D;&#x3D;间隔符号&#x3D;&#x3D;分割的不同字段</td><td align="center"><code>awk -F: &#39;&#123;print $1,$3&#125;&#39;</code></td></tr><tr><td align="center">NF</td><td align="center">当前记录的字段数（列数）</td><td align="center"><code>awk -F: &#39;&#123;print NF&#125;&#39;</code></td></tr><tr><td align="center">$NF</td><td align="center">最后一列</td><td align="center"><code>$(NF-1)</code>表示倒数第二列</td></tr><tr><td align="center">FNR&#x2F;NR</td><td align="center">行号</td><td align="center"></td></tr><tr><td align="center">FS</td><td align="center">定义间隔符</td><td align="center"><code>&#39;BEGIN&#123;FS=&quot;:&quot;&#125;;&#123;print $1,$3&#125;&#39;</code></td></tr><tr><td align="center">OFS</td><td align="center">定义输出字段分隔符，&#x3D;&#x3D;默认空格&#x3D;&#x3D;</td><td align="center"><code>&#39;BEGIN&#123;OFS=&quot;\t&quot;&#125;;print $1,$3&#125;&#39;</code></td></tr><tr><td align="center">RS</td><td align="center">输入记录分割符，默认换行</td><td align="center"><code>&#39;BEGIN&#123;RS=&quot;\t&quot;&#125;;&#123;print $0&#125;&#39;</code></td></tr><tr><td align="center">ORS</td><td align="center">输出记录分割符，默认换行</td><td align="center"><code>&#39;BEGIN&#123;ORS=&quot;\n\n&quot;&#125;;&#123;print $1,$3&#125;&#39;</code></td></tr><tr><td align="center">FILENAME</td><td align="center">当前输入的文件名</td><td align="center"></td></tr></tbody></table><p>awk工作原理</p><p><code>awk -F: &#39;&#123;print $1,$3&#125;&#39; /etc/passwd</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">awk使用一行作为输入，并将这一行赋给内部变量$0，每一行也可称为一个记录，以换行符(RS)结束</span><br><span class="line"></span><br><span class="line">每行被间隔符**:**(默认为空格或制表符)分解成字段(或域)，每个字段存储在已编号的变量中，从$1开始</span><br><span class="line"></span><br><span class="line">问：awk如何知道用空格来分隔字段的呢？</span><br><span class="line"></span><br><span class="line">答：因为有一个内部变量FS来确定字段分隔符。初始时，FS赋为空格</span><br><span class="line"></span><br><span class="line">awk使用print函数打印字段，打印出来的字段会以空格分隔，因为\$1,\$3之间有一个逗号。逗号比较特殊，它映射为另一个内部变量，称为输出字段分隔符OFS，OFS默认为空格</span><br><span class="line"></span><br><span class="line">awk处理完一行后，将从文件中获取另一行，并将其存储在$0中，覆盖原来的内容，然后将新的字符串分隔成字段并进行处理。该过程将持续到所有行处理完毕</span><br></pre></td></tr></table></figure><p>格式化输出<code>print</code>和<code>printf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print函数类似echo &quot;hello world&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> date |awk <span class="string">&#x27;&#123;print &quot;Month: &quot;$2 &quot;\nYear: &quot;$NF&#125;&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> awk -F: <span class="string">&#x27;&#123;print &quot;username is: &quot; $1 &quot;\t uid is: &quot;$3&#125;&#x27;</span> /etc/passwd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf函数类似echo -n</span><br><span class="line"><span class="meta">#</span><span class="bash"> awk -F: <span class="string">&#x27;&#123;printf &quot;%-15s %-10s %-15s\n&quot;, $1,$2,$3&#125;&#x27;</span>  /etc/passwd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> awk -F: <span class="string">&#x27;&#123;printf &quot;|%15s| %10s| %15s|\n&quot;, $1,$2,$3&#125;&#x27;</span> /etc/passwd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> awk -F: <span class="string">&#x27;&#123;printf &quot;|%-15s| %-10s| %-15s|\n&quot;, $1,$2,$3&#125;&#x27;</span> /etc/passwd</span></span><br><span class="line"></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;;&#123;printf &quot;%-15s %-15s %-15s\n&quot;,$1,$6,$NF&#125;&#x27; a.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">%</span><span class="bash">s 字符类型  strings%-20s</span></span><br><span class="line"><span class="meta">%</span><span class="bash">d 数值类型</span></span><br><span class="line">占15字符</span><br><span class="line">- 表示左对齐，默认是右对齐</span><br><span class="line">printf默认不会在行尾自动换行，加\n</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> shell笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda</title>
      <link href="/2021/09/02/conda/"/>
      <url>/2021/09/02/conda/</url>
      
        <content type="html"><![CDATA[<h1 align="center">使用conda安装软件以及环境管理</h1><p>官网<a href="https://www.anaconda.com/products/individual">conda</a>下载安装程序<br><code>wget https://repo.continuum.io/miniconda/Miniconda3-4.3.21-Linux-x86_64.sh</code><br>安装<br><code>bash Miniconda-latest-Linux-x86_64.sh</code><br>安装过程中一直yes，并且将其设置为环境变量，然后重新执行.bashrc<br><code>source ~/.bashrc</code><br>添加频道<br><code>conda config --add channels conda-forge</code><br><code>conda config --add channels r</code><br>  <code>conda config --add channels bioconda</code></p><p>安装生信软件<br><code>conda install softwarename</code></p><hr><p><strong>conda管理环境的部分命令集合：</strong></p><p>#创建名为env_name的新环境</p><p>conda create -n env_name  </p><p>#克隆原有的环境old_env_name，并命名为new_env_name</p><p>conda create -n new_env_name –clone old_env_name  </p><p>#激活env_name环境</p><p>conda activate env_name</p><p>#退出env_name环境</p><p>conda deactivate</p><p>#删除env_name环境</p><p>conda remove -n env_name –all</p><p>#查看环境列表</p><p>conda info -e</p><p>#查看当前环境下安装的软件包</p><p>conda list</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生命之源：海洋</title>
      <link href="/2021/08/26/STARTING/"/>
      <url>/2021/08/26/STARTING/</url>
      
        <content type="html"><![CDATA[<h1 id="Here-we-come"><a href="#Here-we-come" class="headerlink" title="Here we come ~"></a>Here we come ~</h1><h2 id><a href="#" class="headerlink" title></a></h2><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
